<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sasa</name>
    </assembly>
    <members>
        <member name="T:Sasa.Lazy`1">
            <summary>
            A thread-safe lazy value.
            </summary>
            <typeparam name="T">The type of the value to be lazily evaluated.</typeparam>
            <remarks>
            This implements IOptional&lt;T&gt; since it is temporally optional. In other words, at any given
            time it may or may not have a value.
            
            In general, lazy values computed using side-effecting functions are very difficult to reason about.
            </remarks>
        </member>
        <member name="T:Sasa.IOptional`1">
            <summary>
            Encapsulates a value that may or may not be available.
            </summary>
            <typeparam name="T">The type of the encapsulated value.</typeparam>
        </member>
        <member name="T:Sasa.IResolvable`1">
            <summary>
            A container for which you can test whether a value is available.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Sasa.IResolvable`1.HasValue">
            <summary>
            Returns true if a value is available.
            </summary>
        </member>
        <member name="T:Sasa.IValue`1">
            <summary>
            A read-only encapsulated value.
            </summary>
            <typeparam name="T">The type of the encapsulated value.</typeparam>
        </member>
        <member name="P:Sasa.IValue`1.Value">
            <summary>
            A read-only reference to a value.
            </summary>
            <exception cref="T:System.Exception">
            Implementations of <see cref="T:Sasa.IValue`1"/> may throw many different types of exceptions.
            </exception>
        </member>
        <member name="T:Sasa.IVolatile`1">
            <summary>
            A volatile value.
            </summary>
            <typeparam name="T">The type of value held in the reference.</typeparam>
        </member>
        <member name="M:Sasa.IVolatile`1.TryGetValue(`0@)">
            <summary>
            Attempt to extract the value.
            </summary>
            <param name="value">The value contained in the reference.</param>
            <returns>True if the value was successfully retrieved, false otherwise.</returns>
        </member>
        <member name="T:Sasa.IResult`1">
            <summary>
            An interface designating a value that may not have been computed
            due to an error.
            </summary>
            <typeparam name="T">The type of value being computed.</typeparam>
        </member>
        <member name="P:Sasa.IResult`1.Error">
            <summary>
            The resulting error, if any.
            </summary>
        </member>
        <member name="M:Sasa.Lazy`1.#ctor(System.Func{`0})">
            <summary>
            Return a lazily value computed by invoked thunk().
            </summary>
            <param name="thunk">The function used to compute the value when required.</param>
        </member>
        <member name="M:Sasa.Lazy`1.#ctor(`0)">
            <summary>
            Return a resolved lazy value.
            </summary>
            <param name="value">The value to encapsulate in a lazy type.</param>
        </member>
        <member name="M:Sasa.Lazy`1.TryGetValue(`0@)">
            <summary>
            Attempts to extract the value.
            </summary>
            <param name="value">The lazy value to extract.</param>
            <returns>Returns true if the lazy value was already forced, false otherwise.</returns>
            <remarks>
            This method is thread-safe.
            
            Calling this method does not force the lazy computation.
            </remarks>
        </member>
        <member name="M:Sasa.Lazy`1.Eval">
            <summary>
            Evaluate the thunk.
            </summary>
            <returns>The value returned from the thunk.</returns>
        </member>
        <member name="M:Sasa.Lazy`1.op_Implicit(System.Func{`0})~Sasa.Lazy{`0}">
            <summary>
            Implicitly construct a lazy value from a thunk.
            </summary>
            <param name="thunk">The thunk used to compute the lazy value.</param>
            <returns>A lazily computed value.</returns>
        </member>
        <member name="M:Sasa.Lazy`1.op_Implicit(`0)~Sasa.Lazy{`0}">
            <summary>
            Implicitly convert a value to an initialized lazy value.
            </summary>
            <param name="value">The value to wrap.</param>
            <returns>The lazily computed value.</returns>
        </member>
        <member name="P:Sasa.Lazy`1.Value">
            <summary>
            Force evaluation of the value.
            </summary>
            <returns>Returns the computed value.</returns>
        </member>
        <member name="P:Sasa.Lazy`1.Error">
            <summary>
            The resulting error, if any.
            </summary>
        </member>
        <member name="P:Sasa.Lazy`1.HasValue">
            <summary>
            Returns true if the value has been computed.
            </summary>
            <remarks>
            This property is thread-safe.
            
            Accessing this property does not force the lazy computation.
            </remarks>
        </member>
        <member name="T:Sasa.Lazy">
            <summary>
            Convenience methods for lazy values.
            </summary>
        </member>
        <member name="M:Sasa.Lazy.Create``1(System.Func{``0})">
            <summary>
            Construct a new lazy value.
            </summary>
            <typeparam name="T">The type of the lazy value.</typeparam>
            <param name="make">The function constructing the lazy value.</param>
            <returns>A new lazily initialized value.</returns>
        </member>
        <member name="M:Sasa.Lazy.Create``1(``0)">
            <summary>
            Construct a new lazy value.
            </summary>
            <typeparam name="T">The type of the lazy value.</typeparam>
            <param name="make">The function constructing the lazy value.</param>
            <returns>A new lazily initialized value.</returns>
        </member>
        <member name="T:Sasa.Triple`3">
            <summary>
            A three-element tuple.
            </summary>
            <typeparam name="T0">First type.</typeparam>
            <typeparam name="T1">Second type.</typeparam>
            <typeparam name="T2">Third type.</typeparam>
        </member>
        <member name="T:Sasa.ITuple`3">
            <summary>
            A three element tuple.
            </summary>
            <typeparam name="T0">The first argument type.</typeparam>
            <typeparam name="T1">The second argument type.</typeparam>
            <typeparam name="T2">The third argument type.</typeparam>
        </member>
        <member name="T:Sasa.ITuple`2">
            <summary>
            A two element tuple.
            </summary>
            <typeparam name="T0">The first argument type.</typeparam>
            <typeparam name="T1">The second argument type.</typeparam>
        </member>
        <member name="T:Sasa.ITuple`1">
            <summary>
            A two element tuple.
            </summary>
            <typeparam name="T">The first argument type.</typeparam>
        </member>
        <member name="P:Sasa.ITuple`1.First">
            <summary>
            The first value.
            </summary>
        </member>
        <member name="P:Sasa.ITuple`2.Second">
            <summary>
            The second value.
            </summary>
        </member>
        <member name="P:Sasa.ITuple`3.Third">
            <summary>
            The third value.
            </summary>
        </member>
        <member name="M:Sasa.Triple`3.#ctor(`0,`1,`2)">
            <summary>
            Construct a new Triple.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <param name="third">The third value.</param>
        </member>
        <member name="M:Sasa.Triple`3.Bind(`0@,`1@,`2@)">
            <summary>
            Bind all values to locals.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <param name="third">The third value.</param>
        </member>
        <member name="M:Sasa.Triple`3.Equals(Sasa.Triple{`0,`1,`2})">
            <summary>
            Test Triple equality element-wise.
            </summary>
            <param name="other">The Triple to test for equality.</param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Triple`3.Equals(System.Object)">
            <summary>
            Test equality.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True if objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Triple`3.GetHashCode">
            <summary>
            Compute hash code.
            </summary>
            <returns>Hash of the encapsulated values.</returns>
        </member>
        <member name="M:Sasa.Triple`3.CompareTo(Sasa.Triple{`0,`1,`2})">
            <summary>
            Compare the two values, sequentially Triple.First, then Triple.Second if
            Triple.First are equal, then Triple.Third if Triple.Second is equal.
            </summary>
            <param name="other">The Triple to compare against.</param>
            <returns>
            Returns zero if the tuples are equal element-wise, returns a number greater than zero if
            the current tuple is greater than <paramref name="other"/> element-wise, else returns a
            number greater than zero.
            </returns>
        </member>
        <member name="M:Sasa.Triple`3.ToString">
            <summary>
            Return a string representation of this Triple.
            </summary>
            <returns>String representation of this Triple.</returns>
        </member>
        <member name="M:Sasa.Triple`3.op_Equality(Sasa.Triple{`0,`1,`2},Sasa.Triple{`0,`1,`2})">
            <summary>
            Compares two Triples for equality.
            </summary>
            <param name="left">The first Triple.</param>
            <param name="right">The second Triple.</param>
            <returns>Returns true if the Triples are equal, and false otherwise.</returns>
        </member>
        <member name="M:Sasa.Triple`3.op_Inequality(Sasa.Triple{`0,`1,`2},Sasa.Triple{`0,`1,`2})">
            <summary>
            Compares two Triples for inequality.
            </summary>
            <param name="left">The first Triple.</param>
            <param name="right">The second Triple.</param>
            <returns>Returns true if the Triples are not equal, and false otherwise.</returns>
        </member>
        <member name="M:Sasa.Triple`3.op_LessThan(Sasa.Triple{`0,`1,`2},Sasa.Triple{`0,`1,`2})">
            <summary>
            Orders two tuples.
            </summary>
            <param name="left">The first tuple.</param>
            <param name="right">The second tuple.</param>
            <returns>
            True if <paramref name="left"/> is less than <paramref name="right"/>, false otherwise.
            </returns>
        </member>
        <member name="M:Sasa.Triple`3.op_GreaterThan(Sasa.Triple{`0,`1,`2},Sasa.Triple{`0,`1,`2})">
            <summary>
            Orders two tuples.
            </summary>
            <param name="left">The first tuple.</param>
            <param name="right">The second tuple.</param>
            <returns>
            True if <paramref name="left"/> is greater than <paramref name="right"/>, false otherwise.
            </returns>
        </member>
        <member name="M:Sasa.Triple`3.op_LessThanOrEqual(Sasa.Triple{`0,`1,`2},Sasa.Triple{`0,`1,`2})">
            <summary>
            Orders two tuples.
            </summary>
            <param name="left">The first tuple.</param>
            <param name="right">The second tuple.</param>
            <returns>
            True if <paramref name="left"/> is less than or equal to <paramref name="right"/>, false otherwise.
            </returns>
        </member>
        <member name="M:Sasa.Triple`3.op_GreaterThanOrEqual(Sasa.Triple{`0,`1,`2},Sasa.Triple{`0,`1,`2})">
            <summary>
            Orders two tuples.
            </summary>
            <param name="left">The first tuple.</param>
            <param name="right">The second tuple.</param>
            <returns>
            True if <paramref name="left"/> is greater than or equal to <paramref name="right"/>, false otherwise.
            </returns>
        </member>
        <member name="P:Sasa.Triple`3.First">
            <summary>
            First element of the tuple.
            </summary>
        </member>
        <member name="P:Sasa.Triple`3.Second">
            <summary>
            Second element of the tuple.
            </summary>
        </member>
        <member name="P:Sasa.Triple`3.Third">
            <summary>
            Third element of the tuple.
            </summary>
        </member>
        <member name="T:Sasa.TypeConstraint`1">
            <summary>
            Specifies a type constraint that normally C# would not be able to enforce.
            </summary>
            <typeparam name="T">The type constraint to enforce.</typeparam>
        </member>
        <member name="M:Sasa.TypeConstraint`1.op_Implicit(`0)~Sasa.TypeConstraint{`0}">
            <summary>
            Implicitly convert a value of type <typeparamref name="T"/> to a TypeConstraint.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Sasa.TypeConstraint`1.Assert(`0)">
            <summary>
            Assert that the given value satisfies the constraint.
            </summary>
            <param name="value">The constrained value.</param>
            <returns>A type constraint that will be erased.</returns>
        </member>
        <member name="P:Sasa.TypeConstraint`1.Value">
            <summary>
            Extract the encapsulated value.
            </summary>
        </member>
        <member name="T:Sasa.TypeConstraint`2">
            <summary>
            Specifies a subtyping type constraint relationship. You use this constraint
            primarily when compiling with other code that specifies TypeConstraint.
            </summary>
            <typeparam name="T">The inherited type.</typeparam>
            <typeparam name="TBase">The base type for which the constraint is enforced.</typeparam>
        </member>
        <member name="M:Sasa.TypeConstraint`2.op_Implicit(`0)~Sasa.TypeConstraint{`0,`1}">
            <summary>
            Implicitly convert a value of type <typeparamref name="T"/> to a TypeConstraint.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Sasa.TypeConstraint`2.Assert(`0)">
            <summary>
            Assert that the given value satisfies the constraint.
            </summary>
            <param name="value">The constrained value.</param>
            <returns>A type constraint that will be erased.</returns>
        </member>
        <member name="P:Sasa.TypeConstraint`2.Value">
            <summary>
            Extract the encapsulated value.
            </summary>
        </member>
        <member name="T:Sasa.Result`1">
            <summary>
            The result of a computation reified as a value.
            </summary>
            <typeparam name="T">The type of the computation's return value.</typeparam>
        </member>
        <member name="M:Sasa.Result`1.#ctor(`0)">
            <summary>
            Construct an instance of <see cref="T:Sasa.Result`1"/>.
            </summary>
            <param name="value">The result's value.</param>
        </member>
        <member name="M:Sasa.Result`1.#ctor(System.Exception)">
            <summary>
            Construct an instance of <see cref="T:Sasa.Result`1"/>.
            </summary>
            <param name="error">The resulting error.</param>
        </member>
        <member name="M:Sasa.Result`1.TryGetValue(`0@)">
            <summary>
            Attempt to extract the computed value.
            </summary>
            <param name="value">The value computed.</param>
            <returns>True if a value was computed, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Result`1.Equals(`0)">
            <summary>
            Compares the result with a value for equality.
            </summary>
            <param name="other">The value to compare to.</param>
            <returns>True if the values are equal, false otherwise</returns>
        </member>
        <member name="M:Sasa.Result`1.Equals(Sasa.Result{`0})">
            <summary>
            Compares the result with a value for equality.
            </summary>
            <param name="other">The value to compare to.</param>
            <returns>True if the values are equal, false otherwise</returns>
        </member>
        <member name="M:Sasa.Result`1.Equals(System.Object)">
            <summary>
            Compare against <paramref name="obj"/>.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Result`1.GetHashCode">
            <summary>
            Computes hash code.
            </summary>
            <returns>Integer hash code.</returns>
        </member>
        <member name="M:Sasa.Result`1.op_Implicit(`0)~Sasa.Result{`0}">
            <summary>
            Implicitly convert a value into a successful <see cref="T:Sasa.Result`1"/>.
            </summary>
            <param name="value">The return value of the computation.</param>
            <returns>A successful <see cref="T:Sasa.Result`1"/>.</returns>
        </member>
        <member name="M:Sasa.Result`1.op_Implicit(Sasa.Option{`0})~Sasa.Result{`0}">
            <summary>
            Implicit convert an <see cref="T:Sasa.Option`1"/> into a <see cref="T:Sasa.Result`1"/>.
            </summary>
            <param name="opt">The option to convert.</param>
            <returns>A <see cref="T:Sasa.Result`1"/>.</returns>
        </member>
        <member name="M:Sasa.Result`1.op_BitwiseOr(Sasa.Result{`0},Sasa.Result{`0})">
            <summary>
            Coalesce optional value.
            </summary>
            <param name="left">The optional value to return, if available.</param>
            <param name="right">The value to return if optional value is empty.</param>
            <returns>Returns <paramref name="left"/> if not empty, otherwise returns <paramref name="right"/>.</returns>
        </member>
        <member name="M:Sasa.Result`1.op_True(Sasa.Result{`0})">
            <summary>
            Populated optional values reduce to true.
            </summary>
            <param name="result">The optional value to check.</param>
            <returns>True if the HasValue is true.</returns>
        </member>
        <member name="M:Sasa.Result`1.op_False(Sasa.Result{`0})">
            <summary>
            Unpopulated optional values reduce to false.
            </summary>
            <param name="result">The optional value to check.</param>
            <returns>True if !HasValue.</returns>
        </member>
        <member name="M:Sasa.Result`1.Select``1(System.Func{`0,``0})">
            <summary>
            Compute a <see cref="T:Sasa.Result`1"/> from a <see cref="T:Sasa.Result`1"/>.
            </summary>
            <typeparam name="TValue">The new result type.</typeparam>
            <param name="selector">A function computing the <see cref="T:Sasa.Result`1"/>.</param>
            <returns>A <see cref="T:Sasa.Result`1"/> computed from <paramref name="selector"/>.</returns>
        </member>
        <member name="M:Sasa.Result`1.SelectMany``1(System.Func{`0,Sasa.Result{``0}})">
            <summary>
            Projects a new <see cref="T:Sasa.Result`1"/>.
            </summary>
            <typeparam name="TValue">The type of the new result.</typeparam>
            <param name="collector">A projection function.</param>
            <returns>A result for the final value.</returns>
        </member>
        <member name="M:Sasa.Result`1.SelectMany``2(System.Func{`0,Sasa.Result{``0}},System.Func{`0,``0,``1})">
            <summary>
            Project a new <see cref="T:Sasa.Result`1"/>.
            </summary>
            <typeparam name="T0">The type of the intermediate result.</typeparam>
            <typeparam name="TValue">The type of the final result.</typeparam>
            <param name="collector">The intermediate project.</param>
            <param name="selector">The final projection.</param>
            <returns>A result for the final value.</returns>
        </member>
        <member name="M:Sasa.Result`1.op_Equality(Sasa.Result{`0},Sasa.Result{`0})">
            <summary>
            Compare two values for equality.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Result`1.op_Inequality(Sasa.Result{`0},Sasa.Result{`0})">
            <summary>
            Compare two values for inequality.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>True if not equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Result`1.ToString">
            <summary>
            String representation of this result.
            </summary>
            <returns>A string representation of this result.</returns>
        </member>
        <member name="P:Sasa.Result`1.Value">
            <summary>
            The return value of the computation.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Sasa.Result`1"/> has no value. The inner exception indicates the reason.</exception>
        </member>
        <member name="P:Sasa.Result`1.Error">
            <summary>
            The error that was generated.
            </summary>
        </member>
        <member name="P:Sasa.Result`1.HasValue">
            <summary>
            A boolean indicating whether a value was successfully computed.
            </summary>
        </member>
        <member name="T:Sasa.Result">
            <summary>
            Extensions for computations and results.
            </summary>
        </member>
        <member name="F:Sasa.Result.nullRef">
            <summary>
            The exception to use when no value has been provided.
            </summary>
        </member>
        <member name="M:Sasa.Result.Try``1(System.Func{``0})">
            <summary>
            Try executing a function.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
            <param name="func">The function to execute.</param>
            <returns>The result of executing the function.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Result.Try``2(System.Func{``0,``1})">
            <summary>
            Wrap a delegate that may throw exceptions.
            </summary>
            <typeparam name="T0">The function argument type.</typeparam>
            <typeparam name="T1">The function return type.</typeparam>
            <param name="func">The function to wrap.</param>
            <returns>A function that wraps any exceptions thrown by <paramref name="func"/> in a result type.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Result.Try``1(System.Action{``0})">
            <summary>
            Wrap a delegate that may throw exceptions.
            </summary>
            <typeparam name="T">The function argument type.</typeparam>
            <param name="func">The function to wrap.</param>
            <returns>A function that wraps any exceptions thrown by <paramref name="func"/> in a result type.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Result.Return``1(System.Func{Sasa.Result{``0}})">
            <summary>
            Try executing a function.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
            <param name="func">The function to execute.</param>
            <returns>The result of executing the function.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Result.Try(System.Action)">
            <summary>
            Try executing a function.
            </summary>
            <param name="func">The function to execute.</param>
            <returns>The result of executing the function.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Result.Fail``1(System.Exception)">
            <summary>
            Return a <see cref="T:Sasa.Result`1"/> with the given failure message.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
            <param name="error">The error indicating the failure.</param>
            <returns>The resulting failure.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Result.Success``1(``0)">
            <summary>
            Return a successfuly <see cref="T:Sasa.Result`1"/> with the given value.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
            <param name="value">The value returned.</param>
            <returns>The successfuly result.</returns>
        </member>
        <member name="M:Sasa.Result.ToResult``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Transform a lazy sequence of possible error values into lazy sequence of results.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="sequence">The sequence to wrap.</param>
            <returns>A lazy sequence of results.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Result.SelectMany``2(Sasa.IResult{``0},System.Func{``0,Sasa.IResult{``1}})">
            <summary>
            Compute a <see cref="T:Sasa.Result`1"/> from a <see cref="T:Sasa.Result`1"/>.
            </summary>
            <typeparam name="T0">The input type.</typeparam>
            <typeparam name="T1">The type of the new result.</typeparam>
            <param name="result">The initial result.</param>
            <param name="collector">A projection function.</param>
            <returns>A result for the final value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Result.SelectMany``3(Sasa.IResult{``0},System.Func{``0,Sasa.IResult{``1}},System.Func{``0,``1,``2})">
            <summary>
            Project a new <see cref="T:Sasa.Result`1"/>.
            </summary>
            <typeparam name="T0">The input type.</typeparam>
            <typeparam name="T1">The type of the intermediate result.</typeparam>
            <typeparam name="T2">The type of the final result.</typeparam>
            <param name="result">The initial result.</param>
            <param name="collector">The intermediate project.</param>
            <param name="selector">The final projection.</param>
            <returns>A result for the final value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Result.ToResult``1(Sasa.Option{``0})">
            <summary>
            Convert an optional value to a result.
            </summary>
            <typeparam name="T">The type of the encapsulated value.</typeparam>
            <param name="value">The nullable value.</param>
            <returns>A result describing the nullable value.</returns>
        </member>
        <member name="M:Sasa.Result.ToResult``1(System.Nullable{``0})">
            <summary>
            Convert an optional value to a result.
            </summary>
            <typeparam name="T">The type of the encapsulated value.</typeparam>
            <param name="value">The nullable value.</param>
            <returns>A result describing the nullable value.</returns>
        </member>
        <member name="M:Sasa.Result.Where``1(Sasa.Result{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filter out an invalid value based on a predicate.
            </summary>
            <typeparam name="T">The source type.</typeparam>
            <param name="value">The result value.</param>
            <param name="predicate">The function to apply.</param>
            <returns>A result of type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Result.Any``1(Sasa.Result{``0},System.Func{``0,System.Boolean})">
            <summary>
            Check a predicate against a result.
            </summary>
            <typeparam name="T">The source type.</typeparam>
            <param name="value">The result value.</param>
            <param name="predicate">The predicate to check.</param>
            <returns>True if <paramref name="value"/> has a value and the predicate returns true; false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Result.All``1(Sasa.Result{``0},System.Func{``0,System.Boolean})">
            <summary>
            Check a predicate against a result.
            </summary>
            <typeparam name="T">The source type.</typeparam>
            <param name="value">The result value.</param>
            <param name="predicate">The predicate to check.</param>
            <returns>True if <paramref name="value"/> does not have a value or if the predicate returns true; false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="T:Sasa.EventModify`1">
            <summary>
            The delegate representing thread-safe event modifications.
            </summary>
            <typeparam name="T">The type of event.</typeparam>
            <param name="field">The event field being modified.</param>
            <param name="handler">The handler to add/remove from <paramref name="field"/>.</param>
        </member>
        <member name="T:Sasa.Events">
             <summary>
             Extension methods to safely trigger events. Triggering events
             using Raise() is both null-safe and thread-safe. Delegates
             are still required to ensure the state they are accessing
             is valid.
             </summary>
             <remarks>
             These functions provide a certain type of thread-safety. Eric
             Lippert described the two thread-safety issues with events on
             his blog:
             
             http://blogs.msdn.com/ericlippert/archive/2009/04/29/events-and-races.aspx
            
             This Events class provides thread-safety #1 in his list, but
             not #2. Clients do not need to perform null checks before calling
             Raise() on them, and do not need to perform locking to synchronize
             add/remove handlers if they use the Add()/Remove() functions,
             etc.
             
             Clients are still required to ensure that any delegates
             called are accessing valid state, even though that state may
             have changed.
             </remarks>
        </member>
        <member name="M:Sasa.Events.RaiseAny(System.Delegate,System.Object[])">
            <summary>
            Safely raise any event.
            </summary>
            <param name="del">The multicast delegate representing the event.</param>
            <param name="args">The arguments to the delegate.</param>
        </member>
        <member name="M:Sasa.Events.Raise(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Safely raise an EventHandler event.
            </summary>
            <param name="del">The delegate representing the event.</param>
            <param name="sender">The object triggering the event.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Sasa.Events.Raise(System.ComponentModel.PropertyChangedEventHandler,System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Safely raise an event.
            </summary>
            <param name="del">The delegate representing the event.</param>
            <param name="sender">The object triggering the event.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Sasa.Events.Raise(System.ComponentModel.PropertyChangingEventHandler,System.Object,System.ComponentModel.PropertyChangingEventArgs)">
            <summary>
            Safely raise an event.
            </summary>
            <param name="del">The delegate representing the event.</param>
            <param name="sender">The object triggering the event.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Sasa.Events.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Safely raise an EventHandler event.
            </summary>
            <typeparam name="T">The type of the EventArgs.</typeparam>
            <param name="del">The delegate representing the event.</param>
            <param name="sender">The object triggering the event.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Sasa.Events.Raise(System.Action)">
            <summary>
            Safely raise an Action event.
            </summary>
            <param name="del">The delegate representing the event.</param>
        </member>
        <member name="M:Sasa.Events.Raise``1(System.Action{``0},``0)">
            <summary>
            Safely raise an Action event.
            </summary>
            <typeparam name="T">The type of the argument to the event.</typeparam>
            <param name="del">The delegate representing the event.</param>
            <param name="arg0">The first event arg.</param>
        </member>
        <member name="M:Sasa.Events.Raise``2(System.Action{``0,``1},``0,``1)">
            <summary>
            Safely raise an Action event.
            </summary>
            <typeparam name="T0">The type of the first argument to the event.</typeparam>
            <typeparam name="T1">The type of the second argument to the event.</typeparam>
            <param name="del">The delegate representing the event.</param>
            <param name="arg0">The first event arg.</param>
            <param name="arg1">The second event arg.</param>
        </member>
        <member name="M:Sasa.Events.Raise``3(System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            Safely raise an Action event.
            </summary>
            <typeparam name="T0">The type of the first argument to the event.</typeparam>
            <typeparam name="T1">The type of the second argument to the event.</typeparam>
            <typeparam name="T2">The type of the third argument to the event.</typeparam>
            <param name="del">The delegate representing the event.</param>
            <param name="arg0">The first event arg.</param>
            <param name="arg1">The second event arg.</param>
            <param name="arg2">The third event arg.</param>
        </member>
        <member name="M:Sasa.Events.Raise``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Safely raise an Action event.
            </summary>
            <typeparam name="T">The type of the first argument to the event.</typeparam>
            <typeparam name="T1">The type of the second argument to the event.</typeparam>
            <typeparam name="T2">The type of the third argument to the event.</typeparam>
            <typeparam name="T3">The type of the third argument to the event.</typeparam>
            <param name="del">The delegate representing the event.</param>
            <param name="arg0">The first event arg.</param>
            <param name="arg1">The second event arg.</param>
            <param name="arg2">The third event arg.</param>
            <param name="arg3">The fourth event arg.</param>
        </member>
        <member name="M:Sasa.Events.Add``1(``0@,``0)">
            <summary>
            Add <paramref name="newHandler"/> to the list of events <paramref name="del"/>.
            </summary>
            <param name="del">A reference to the local <see cref="T:System.Delegate"/>.</param>
            <param name="newHandler">The delegate to add.</param>
        </member>
        <member name="M:Sasa.Events.Remove``1(``0@,``0)">
            <summary>
            Remove <paramref name="newHandler"/> from the list of events <paramref name="del"/>.
            </summary>
            <param name="del">A reference to the local <see cref="T:System.Delegate"/>.</param>
            <param name="newHandler">The delegate to remove.</param>
        </member>
        <member name="M:Sasa.Events.Clear``1(``0@)">
            <summary>
            Clears an event by setting the field to null and returning the previous event contents.
            </summary>
            <typeparam name="T">The type of the delegate.</typeparam>
            <param name="del">A reference to the local <see cref="T:System.Delegate"/>.</param>
            <returns>The previous event contents.</returns>
        </member>
        <member name="T:Sasa.Numbers">
            <summary>
            Extensions on numberic types.
            </summary>
        </member>
        <member name="M:Sasa.Numbers.UpTo``1(``0,``0)">
            <summary>
            Generate a stream of <typeparamref name="T"/> from <paramref name="start"/> up to <paramref name="end"/>.
            </summary>
            <typeparam name="T">The sequence type.</typeparam>
            <param name="start">The lower incusive bound of the sequence.</param>
            <param name="end">The upper exclusive bound of the sequence.</param>
            <returns>A stream of int from [<paramref name="start"/>, <paramref name="end"/>) incremented by 1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="start"/> is greater than <paramref name="end"/>.</exception>
        </member>
        <member name="M:Sasa.Numbers.UpTo``1(``0,``0,``0)">
            <summary>
            Generate a stream of <typeparamref name="T"/> from <paramref name="start"/> up to <paramref name="end"/>.
            </summary>
            <typeparam name="T">The sequence type.</typeparam>
            <param name="start">The lower incusive bound of the sequence.</param>
            <param name="end">The upper exclusive bound of the sequence.</param>
            <param name="step">The increment value.</param>
            <returns>A stream of int from [<paramref name="start"/>, <paramref name="end"/>) incremented by <paramref name="step"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="start"/> is greater than <paramref name="end"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="step"/> is less than or equal to zero.</exception>
        </member>
        <member name="M:Sasa.Numbers.DownTo``1(``0,``0)">
            <summary>
            Generate a stream of numbers from start up to end.
            </summary>
            <param name="start">The upper incusive bound of the stream.</param>
            <param name="end">The lower exclusive bound of the stream.</param>
            <returns>A stream of int from [<paramref name="start"/>, <paramref name="end"/>).</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="start"/> is less than <paramref name="end"/>.</exception>
        </member>
        <member name="M:Sasa.Numbers.DownTo``1(``0,``0,``0)">
            <summary>
            Generate a stream of numbers from start up to end.
            </summary>
            <param name="start">The upper incusive bound of the stream.</param>
            <param name="end">The lower exclusive bound of the stream.</param>
            <param name="step">The increment value.</param>
            <returns>A stream of int from [<paramref name="start"/>, <paramref name="end"/>).</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="start"/> is less than <paramref name="end"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="step"/> is less than or equal to zero.</exception>
        </member>
        <member name="M:Sasa.Numbers.Bound``1(``0,``0,``0)">
            <summary>
            Bound the given int by the upper and lower values.
            </summary>
            <param name="value">The int to bound.</param>
            <param name="min">The lower inclusive bound.</param>
            <param name="max">The upper inclusive bound.</param>
            <returns>
            Generate <paramref name="value"/> if <paramref name="min"/> &lt;= <paramref name="value"/> &lt;= <paramref name="max"/>,
            or <paramref name="min"/> or <paramref name="max"/> if <paramref name="value"/> is out of that range.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="min"/> is greater than <paramref name="max"/>.</exception>
        </member>
        <member name="M:Sasa.Numbers.Max``1(``0,``0)">
            <summary>
            Find the maximum of two values.
            </summary>
            <typeparam name="T">The type of values being compared.</typeparam>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <returns>The max of <paramref name="first"/> and <paramref name="second"/>.</returns>
        </member>
        <member name="M:Sasa.Numbers.Min``1(``0,``0)">
            <summary>
            Find the maximum of two values.
            </summary>
            <typeparam name="T">The type of values being compared.</typeparam>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <returns>The max of <paramref name="first"/> and <paramref name="second"/>.</returns>
        </member>
        <member name="M:Sasa.Numbers.ToSentence(System.Int32)">
            <summary>
            Converts the given number to an english sentence.
            </summary>
            <param name="number">The number to convert.</param>
            <returns>The string representation of the number.</returns>
        </member>
        <member name="T:Sasa.Values">
            <summary>
            Generic value extensions.
            </summary>
        </member>
        <member name="M:Sasa.Values.IsIn``1(``0,``0)">
            <summary>
            Checks for membership in a set.
            </summary>
            <typeparam name="T">The type of value to check for.</typeparam>
            <param name="value">The value to check for membership.</param>
            <param name="arg0">The first value to compare against.</param>
            <returns>True if <paramref name="value"/> is equal to one of the other parameters, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Values.IsIn``1(``0,``0,``0)">
            <summary>
            Checks for membership in a set.
            </summary>
            <typeparam name="T">The type of value to check for.</typeparam>
            <param name="value">The value to check for membership.</param>
            <param name="arg0">The first value to compare against.</param>
            <param name="arg1">The second value to compare against.</param>
            <returns>True if <paramref name="value"/> is equal to one of the other parameters, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Values.IsIn``1(``0,``0,``0,``0)">
            <summary>
            Checks for membership in a set.
            </summary>
            <typeparam name="T">The type of value to check for.</typeparam>
            <param name="value">The value to check for membership.</param>
            <param name="arg0">The first value to compare against.</param>
            <param name="arg1">The second value to compare against.</param>
            <param name="arg2">The third value to compare against.</param>
            <returns>True if <paramref name="value"/> is equal to one of the other parameters, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Values.IsIn``1(``0,``0,``0,``0,``0)">
            <summary>
            Checks for membership in a set.
            </summary>
            <typeparam name="T">The type of value to check for.</typeparam>
            <param name="value">The value to check for membership.</param>
            <param name="arg0">The first value to compare against.</param>
            <param name="arg1">The second value to compare against.</param>
            <param name="arg2">The third value to compare against.</param>
            <param name="arg3">The fourth value to compare against.</param>
            <returns>True if <paramref name="value"/> is equal to one of the other parameters, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Values.IsIn``1(``0,``0[])">
            <summary>
            Checks for membership in a set.
            </summary>
            <typeparam name="T">The type of value to check for.</typeparam>
            <param name="value">The value to check for membership.</param>
            <param name="set">The set to check for membership.</param>
            <returns>True if <paramref name="value"/> is in the set, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Values.IsIn``1(``0,System.Collections.Generic.IEqualityComparer{``0},``0)">
            <summary>
            Checks for membership in a set.
            </summary>
            <typeparam name="T">The type of value to check for.</typeparam>
            <param name="value">The value to check for membership.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use.</param>
            <param name="arg0">The first value to compare against.</param>
            <returns>True if <paramref name="value"/> is equal to one of the other parameters, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Values.IsIn``1(``0,System.Collections.Generic.IEqualityComparer{``0},``0,``0)">
            <summary>
            Checks for membership in a set.
            </summary>
            <typeparam name="T">The type of value to check for.</typeparam>
            <param name="value">The value to check for membership.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use.</param>
            <param name="arg0">The first value to compare against.</param>
            <param name="arg1">The second value to compare against.</param>
            <returns>True if <paramref name="value"/> is equal to one of the other parameters, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Values.IsIn``1(``0,System.Collections.Generic.IEqualityComparer{``0},``0,``0,``0)">
            <summary>
            Checks for membership in a set.
            </summary>
            <typeparam name="T">The type of value to check for.</typeparam>
            <param name="value">The value to check for membership.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use.</param>
            <param name="arg0">The first value to compare against.</param>
            <param name="arg1">The second value to compare against.</param>
            <param name="arg2">The third value to compare against.</param>
            <returns>True if <paramref name="value"/> is equal to one of the other parameters, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Values.IsIn``1(``0,System.Collections.Generic.IEqualityComparer{``0},``0,``0,``0,``0)">
            <summary>
            Checks for membership in a set.
            </summary>
            <typeparam name="T">The type of value to check for.</typeparam>
            <param name="value">The value to check for membership.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use.</param>
            <param name="arg0">The first value to compare against.</param>
            <param name="arg1">The second value to compare against.</param>
            <param name="arg2">The third value to compare against.</param>
            <param name="arg3">The fourth value to compare against.</param>
            <returns>True if <paramref name="value"/> is equal to one of the other parameters, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Values.IsIn``1(``0,System.Collections.Generic.IEqualityComparer{``0},``0[])">
            <summary>
            Checks for membership in a set.
            </summary>
            <typeparam name="T">The type of value to check for.</typeparam>
            <param name="value">The value to check for membership.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use.</param>
            <param name="set">The set to check for membership.</param>
            <returns>True if <paramref name="value"/> is in the set, false otherwise.</returns>
        </member>
        <member name="T:Sasa.Empty">
            <summary>
            An empty/void value.
            </summary>
        </member>
        <member name="M:Sasa.Empty.Equals(System.Object)">
            <summary>
            Equality test for Empty.
            </summary>
            <param name="obj">Object to compare.</param>
            <returns>Returns true of <paramref name="obj"/> is Void, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Empty.Equals(Sasa.Empty)">
            <summary>
            Equality test for Empty.
            </summary>
            <param name="other">Object to compare.</param>
            <returns>Returns true.</returns>
        </member>
        <member name="M:Sasa.Empty.GetHashCode">
            <summary>
            Returns the hash code for a Void value.
            </summary>
            <returns>Hash code for Void.</returns>
        </member>
        <member name="M:Sasa.Empty.ToString">
            <summary>
            Convert Void to a string.
            </summary>
            <returns>Returns a string representation of a Unit value.</returns>
        </member>
        <member name="M:Sasa.Empty.op_Equality(Sasa.Empty,Sasa.Empty)">
            <summary>
            Equality on two voids is always true.
            </summary>
            <param name="left">Left hand side.</param>
            <param name="right">Right hand side.</param>
            <returns>Returns true.</returns>
        </member>
        <member name="M:Sasa.Empty.op_Inequality(Sasa.Empty,Sasa.Empty)">
            <summary>
            Inequality on two voids is always false.
            </summary>
            <param name="left">Left hand side.</param>
            <param name="right">Right hand side.</param>
            <returns>Returns false.</returns>
        </member>
        <member name="T:Sasa.IO.FilePath">
            <summary>
            A structured file system path.
            </summary>
            <remarks>
            This module ensures that all paths containing "." and ".." are rewritten to equivalent forms without
            directory change operations, where possible.
            
            In some cases, this is not possible, such as when ".." precedes the rest of the path, ie. ../foo. In such
            cases, the directory change operations are retained, under the assumption that a future path combination
            will permit full resolution.
            </remarks>
        </member>
        <member name="M:Sasa.IO.FilePath.#ctor(System.String)">
            <summary>
            Construct a structured file system path.
            </summary>
            <param name="path">The root path.</param>
        </member>
        <member name="M:Sasa.IO.FilePath.Resolve(System.String)">
            <summary>
            Resolves all relative changes in a path.
            </summary>
            <param name="path">The path to resolve.</param>
            <returns>A resolved path string.</returns>
        </member>
        <member name="M:Sasa.IO.FilePath.Parse(System.Text.StringBuilder,System.Int32,System.String,System.Int32)">
            <summary>
            Traverse the path string in reverse order, skipping fragments due to
            encountered .. fragments along the way.
            </summary>
            <param name="norm">The resolved path string.</param>
            <param name="skip">The number of fragments to skip.</param>
            <param name="path">The path string.</param>
            <param name="end">The current end of the fragment.</param>
        </member>
        <member name="M:Sasa.IO.FilePath.Combine(Sasa.IO.FilePath)">
            <summary>
            Construct a combined path from two paths.
            </summary>
            <param name="file">The path to combine with this one.</param>
            <returns>The combined path.</returns>
        </member>
        <member name="M:Sasa.IO.FilePath.GetEnumerator">
            <summary>
            Returns an enumerator over the file path components.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Sasa.IO.FilePath.Jail(Sasa.IO.FilePath,Sasa.IO.FilePath)">
            <summary>
            Ensure <paramref name="path"/> cannot escape the <paramref name="root" /> directory.
            </summary>
            <param name="root">The root path.</param>
            <param name="path">The path under <paramref name="root"/>.</param>
            <returns>A full path under <paramref name="root"/>.</returns>
        </member>
        <member name="M:Sasa.IO.FilePath.Jail(Sasa.IO.FilePath)">
            <summary>
            Ensure <paramref name="path"/> cannot escape the current directory.
            </summary>
            <param name="path">The path under the current directory.</param>
            <returns>A full path under current directory.</returns>
        </member>
        <member name="M:Sasa.IO.FilePath.Equals(Sasa.IO.FilePath)">
            <summary>
            Compare two paths for equality.
            </summary>
            <param name="other">The path to compare to.</param>
            <returns>True if the paths are equal.</returns>
        </member>
        <member name="M:Sasa.IO.FilePath.Equals(System.Object)">
            <summary>
            Compare two paths for equality.
            </summary>
            <param name="obj">The path to compare to.</param>
            <returns>True if the paths are equal.</returns>
        </member>
        <member name="M:Sasa.IO.FilePath.GetHashCode">
            <summary>
            Compute hash code of path.
            </summary>
            <returns>Hash code for path.</returns>
        </member>
        <member name="M:Sasa.IO.FilePath.CompareTo(Sasa.IO.FilePath)">
            <summary>
            Order two paths.
            </summary>
            <param name="other">Other path to compare against.</param>
            <returns>Returns zero if equal, less than zero if this path
            is less than <paramref name="other"/>, else returns greater than
            zero.</returns>
        </member>
        <member name="M:Sasa.IO.FilePath.IsParentOf(Sasa.IO.FilePath)">
            <summary>
            Checks whether <paramref name="other"/> is a child of this path.
            </summary>
            <param name="other">The path to check.</param>
            <returns>True if <paramref name="other"/> is a child of this path.</returns>
        </member>
        <member name="M:Sasa.IO.FilePath.ToString">
            <summary>
            Return a string representation of the path.
            </summary>
            <returns>A string representation of the path.</returns>
        </member>
        <member name="M:Sasa.IO.FilePath.ToString(System.Char)">
            <summary>
            Return a string representation of the path.
            </summary>
            <param name="directorySeparator">The character to use to separate directory components of a path.</param>
            <returns>A string representation of the path.</returns>
        </member>
        <member name="M:Sasa.IO.FilePath.op_Division(Sasa.IO.FilePath,System.String)">
            <summary>
            Combine the given path and string component.
            </summary>
            <param name="path">A structured path.</param>
            <param name="part">An unstructured path string.</param>
            <returns>The combined structured path.</returns>
        </member>
        <member name="M:Sasa.IO.FilePath.op_Division(System.String,Sasa.IO.FilePath)">
            <summary>
            Combine the given path and string component.
            </summary>
            <param name="path">A structured path.</param>
            <param name="part">An unstructured path string.</param>
            <returns>The combined structured path.</returns>
        </member>
        <member name="M:Sasa.IO.FilePath.op_Division(Sasa.IO.FilePath,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Combine the given path and string components.
            </summary>
            <param name="path">The structured path.</param>
            <param name="parts">The components of a path.</param>
            <returns>A combined structured path.</returns>
        </member>
        <member name="M:Sasa.IO.FilePath.op_Division(System.Collections.Generic.IEnumerable{System.String},Sasa.IO.FilePath)">
            <summary>
            Combine the given path and string components.
            </summary>
            <param name="path">The structured path.</param>
            <param name="parts">The components of a path.</param>
            <returns>A combined structured path.</returns>
        </member>
        <member name="M:Sasa.IO.FilePath.op_Division(System.String[],Sasa.IO.FilePath)">
            <summary>
            Combine the given path and string components.
            </summary>
            <param name="path">The structured path.</param>
            <param name="parts">The components of a path.</param>
            <returns>A combined structured path.</returns>
        </member>
        <member name="M:Sasa.IO.FilePath.op_Division(Sasa.IO.FilePath,Sasa.IO.FilePath)">
            <summary>
            Combine the given path and string components.
            </summary>
            <param name="path1">The first structured path.</param>
            <param name="path2">The second structured path.</param>
            <returns>The combined structured path.</returns>
        </member>
        <member name="M:Sasa.IO.FilePath.op_Implicit(System.String)~Sasa.IO.FilePath">
            <summary>
            Implicitly convert a string to a structured path.
            </summary>
            <param name="path">The path contained in an unstructured string.</param>
            <returns>A structured path.</returns>
        </member>
        <member name="M:Sasa.IO.FilePath.op_Equality(Sasa.IO.FilePath,Sasa.IO.FilePath)">
            <summary>
            Check path equality.
            </summary>
            <param name="left">The left hand path.</param>
            <param name="right">The right hand path.</param>
            <returns>True if paths are equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.IO.FilePath.op_Inequality(Sasa.IO.FilePath,Sasa.IO.FilePath)">
            <summary>
            Check path inequality.
            </summary>
            <param name="left">The left hand path.</param>
            <param name="right">The right hand path.</param>
            <returns>True if paths are not equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.IO.FilePath.op_LessThan(Sasa.IO.FilePath,Sasa.IO.FilePath)">
            <summary>
            Check path inequality.
            </summary>
            <param name="left">The left hand path.</param>
            <param name="right">The right hand path.</param>
            <returns>True if paths are not equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.IO.FilePath.op_GreaterThan(Sasa.IO.FilePath,Sasa.IO.FilePath)">
            <summary>
            Check path inequality.
            </summary>
            <param name="left">The left hand path.</param>
            <param name="right">The right hand path.</param>
            <returns>True if paths are not equal, false otherwise.</returns>
        </member>
        <member name="T:Sasa.VFunc`2">
            <summary>
            Type used for open instance delegates to value types.
            </summary>
            <typeparam name="T0">The type of the 'this' parameter.</typeparam>
            <typeparam name="T1">The type of the instance method's first argument.</typeparam>
            <param name="arg0">The 'this' parameter.</param>
            <returns>The instance method return value.</returns>
        </member>
        <member name="T:Sasa.VFunc`3">
            <summary>
            Type used for open instance delegates to value types.
            </summary>
            <typeparam name="T0">The type of the 'this' parameter.</typeparam>
            <typeparam name="T1">The type of the instance method's first argument.</typeparam>
            <typeparam name="T2">The type of the instance method's second argument.</typeparam>
            <param name="arg0">The 'this' parameter.</param>
            <param name="arg1">The first argument of the instance method.</param>
            <returns>The instance method return value.</returns>
        </member>
        <member name="T:Sasa.VFunc`4">
            <summary>
            Type used for open instance delegates to value types.
            </summary>
            <typeparam name="T0">The type of the 'this' parameter.</typeparam>
            <typeparam name="T1">The type of the instance method's first argument.</typeparam>
            <typeparam name="T2">The type of the instance method's second argument.</typeparam>
            <typeparam name="T3">The type of the instance method's return value.</typeparam>
            <param name="arg0">The 'this' parameter.</param>
            <param name="arg1">The first argument of the instance method.</param>
            <param name="arg2">The second argument of the instance method.</param>
            <returns>The instance method return value.</returns>
        </member>
        <member name="T:Sasa.VFunc`5">
            <summary>
            Type used for open instance delegates to value types.
            </summary>
            <typeparam name="T0">The type of the 'this' parameter.</typeparam>
            <typeparam name="T1">The type of the instance method's first argument.</typeparam>
            <typeparam name="T2">The type of the instance method's second argument.</typeparam>
            <typeparam name="T3">The type of the instance method's third argument.</typeparam>
            <typeparam name="T4">The type of the instance method's return value.</typeparam>
            <param name="arg0">The 'this' parameter.</param>
            <param name="arg1">The first argument of the instance method.</param>
            <param name="arg2">The second argument of the instance method.</param>
            <param name="arg3">The third argument of the instance method.</param>
            <returns>The instance method return value.</returns>
        </member>
        <member name="T:Sasa.VAction`1">
            <summary>
            Type used for open instance delegates to value types.
            </summary>
            <typeparam name="T0">The type of the 'this' parameter.</typeparam>
            <param name="arg0">The 'this' parameter.</param>
        </member>
        <member name="T:Sasa.VAction`2">
            <summary>
            Type used for open instance delegates to value types.
            </summary>
            <typeparam name="T0">The type of the 'this' parameter.</typeparam>
            <typeparam name="T1">The type of the instance method's first argument.</typeparam>
            <param name="arg0">The 'this' parameter.</param>
            <param name="arg1">The first argument of the instance method.</param>
        </member>
        <member name="T:Sasa.VAction`3">
            <summary>
            Type used for open instance delegates to value types.
            </summary>
            <typeparam name="T0">The type of the 'this' parameter.</typeparam>
            <typeparam name="T1">The type of the instance method's first argument.</typeparam>
            <typeparam name="T2">The type of the instance method's second argument.</typeparam>
            <param name="arg0">The 'this' parameter.</param>
            <param name="arg1">The first argument of the instance method.</param>
            <param name="arg2">The second argument of the instance method.</param>
        </member>
        <member name="T:Sasa.VAction`4">
            <summary>
            Type used for open instance delegates to value types.
            </summary>
            <typeparam name="T0">The type of the 'this' parameter.</typeparam>
            <typeparam name="T1">The type of the instance method's first argument.</typeparam>
            <typeparam name="T2">The type of the instance method's second argument.</typeparam>
            <typeparam name="T3">The type of the instance method's third argument.</typeparam>
            <param name="arg0">The 'this' parameter.</param>
            <param name="arg1">The first argument of the instance method.</param>
            <param name="arg2">The second argument of the instance method.</param>
            <param name="arg3">The third argument of the instance method.</param>
        </member>
        <member name="T:Sasa.Func">
            <summary>
            Typed delegate extension methods.
            </summary>
        </member>
        <member name="M:Sasa.Func.Id``1(``0)">
            <summary>
            The identity function.
            </summary>
            <typeparam name="T">The type of value to return.</typeparam>
            <param name="value">The value to return.</param>
            <returns>Simply returns <paramref name="value"/>.</returns>
        </member>
        <member name="M:Sasa.Func.Fix``2(System.Func{System.Func{``0,``1},System.Func{``0,``1}})">
            <summary>
            Compute the fixpoint of a given function.
            </summary>
            <typeparam name="T0">The argument type.</typeparam>
            <typeparam name="T1">The return type.</typeparam>
            <param name="recurse">The function describing the body of the recursive function.</param>
            <returns>A recursive definition of the given function.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Func.Fix``3(System.Func{System.Func{``0,``1,``2},System.Func{``0,``1,``2}})">
            <summary>
            Compute the fixpoint of a given function.
            </summary>
            <typeparam name="T0">The first argument type.</typeparam>
            <typeparam name="T1">The second argument type.</typeparam>
            <typeparam name="T2">The return type.</typeparam>
            <param name="recurse">The function describing the body of the recursive function.</param>
            <returns>A recursive definition of the given function.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Func.Open``2(System.Func{``1})">
            <summary>
            Create an open instance delegate from a closed delegate.
            </summary>
            <typeparam name="T0">The class on which this delegate dispatches.</typeparam>
            <typeparam name="T1">The method return value.</typeparam>
            <param name="instance">The current delegate instance.</param>
            <returns>An open instance delegate on <typeparamref name="T0"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="instance"/>'s declaring type is not <typeparamref name="T0"/>.</exception>
        </member>
        <member name="M:Sasa.Func.Open``3(System.Func{``1,``2})">
            <summary>
            Create an open instance delegate from a closed delegate.
            </summary>
            <typeparam name="T0">The class on which this delegate dispatches.</typeparam>
            <typeparam name="T1">The first method argument.</typeparam>
            <typeparam name="T2">The method return value.</typeparam>
            <param name="instance">The current delegate instance.</param>
            <returns>An open instance delegate on <typeparamref name="T0"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="instance"/>'s declaring type is not <typeparamref name="T0"/>.</exception>
        </member>
        <member name="M:Sasa.Func.Open``4(System.Func{``1,``2,``3})">
            <summary>
            Create an open instance delegate from a closed delegate.
            </summary>
            <typeparam name="T0">The class on which this delegate dispatches.</typeparam>
            <typeparam name="T1">The first method argument.</typeparam>
            <typeparam name="T2">The second method argument.</typeparam>
            <typeparam name="T3">The method return value.</typeparam>
            <param name="instance">The current delegate instance.</param>
            <returns>An open instance delegate on <typeparamref name="T0"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="instance"/>'s declaring type is not <typeparamref name="T0"/>.</exception>
        </member>
        <member name="M:Sasa.Func.Open``5(System.Func{``1,``2,``3,``4})">
            <summary>
            Create an open instance delegate from a closed delegate.
            </summary>
            <typeparam name="T0">The class on which this delegate dispatches.</typeparam>
            <typeparam name="T1">The first method argument.</typeparam>
            <typeparam name="T2">The second method argument.</typeparam>
            <typeparam name="T3">The third method argument.</typeparam>
            <typeparam name="T4">The method return value.</typeparam>
            <param name="instance">The current delegate instance.</param>
            <returns>An open instance delegate on <typeparamref name="T0"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="instance"/>'s declaring type is not <typeparamref name="T0"/>.</exception>
        </member>
        <member name="M:Sasa.Func.VOpen``2(System.Func{``1})">
            <summary>
            Create an open instance delegate from a closed delegate.
            </summary>
            <typeparam name="T0">The class on which this delegate dispatches.</typeparam>
            <typeparam name="T1">The method return value.</typeparam>
            <param name="instance">The current delegate instance.</param>
            <returns>An open instance delegate on <typeparamref name="T0"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="instance"/>'s declaring type is not <typeparamref name="T0"/>.</exception>
        </member>
        <member name="M:Sasa.Func.VOpen``3(System.Func{``1,``2})">
            <summary>
            Create an open instance delegate from a closed delegate.
            </summary>
            <typeparam name="T0">The class on which this delegate dispatches.</typeparam>
            <typeparam name="T1">The first method argument.</typeparam>
            <typeparam name="T2">The method return value.</typeparam>
            <param name="instance">The current delegate instance.</param>
            <returns>An open instance delegate on <typeparamref name="T0"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="instance"/>'s declaring type is not <typeparamref name="T0"/>.</exception>
        </member>
        <member name="M:Sasa.Func.VOpen``4(System.Func{``1,``2,``3})">
            <summary>
            Create an open instance delegate from a closed delegate.
            </summary>
            <typeparam name="T0">The class on which this delegate dispatches.</typeparam>
            <typeparam name="T1">The first method argument.</typeparam>
            <typeparam name="T2">The second method argument.</typeparam>
            <typeparam name="T3">The method return value.</typeparam>
            <param name="instance">The current delegate instance.</param>
            <returns>An open instance delegate on <typeparamref name="T0"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="instance"/>'s declaring type is not <typeparamref name="T0"/>.</exception>
        </member>
        <member name="M:Sasa.Func.VOpen``5(System.Func{``1,``2,``3,``4})">
            <summary>
            Create an open instance delegate from a closed delegate.
            </summary>
            <typeparam name="T0">The class on which this delegate dispatches.</typeparam>
            <typeparam name="T1">The first method argument.</typeparam>
            <typeparam name="T2">The second method argument.</typeparam>
            <typeparam name="T3">The third method argument.</typeparam>
            <typeparam name="T4">The method return value.</typeparam>
            <param name="instance">The current delegate instance.</param>
            <returns>An open instance delegate on <typeparamref name="T0"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="instance"/>'s declaring type is not <typeparamref name="T0"/>.</exception>
        </member>
        <member name="M:Sasa.Func.OpenAction``1(System.Action)">
            <summary>
            Create an open instance delegate from a closed delegate.
            </summary>
            <typeparam name="T">The class on which this delegate dispatches.</typeparam>
            <param name="instance"></param>
            <returns>An open instance delegate on <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="instance"/>'s declaring type is not <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Sasa.Func.OpenAction``2(System.Action{``1})">
            <summary>
            Create an open instance delegate from a closed delegate.
            </summary>
            <typeparam name="T0">The class on which this delegate dispatches.</typeparam>
            <typeparam name="T1">The first method argument.</typeparam>
            <param name="instance">The current delegate instance.</param>
            <returns>An open instance delegate on <typeparamref name="T0"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="instance"/>'s declaring type is not <typeparamref name="T0"/>.</exception>
        </member>
        <member name="M:Sasa.Func.OpenAction``3(System.Action{``1,``2})">
            <summary>
            Create an open instance delegate from a closed delegate.
            </summary>
            <typeparam name="T0">The class on which this delegate dispatches.</typeparam>
            <typeparam name="T1">The first method argument.</typeparam>
            <typeparam name="T2">The second method argument.</typeparam>
            <param name="instance">The current delegate instance.</param>
            <returns>An open instance delegate on <typeparamref name="T0"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="instance"/>'s declaring type is not <typeparamref name="T0"/>.</exception>
        </member>
        <member name="M:Sasa.Func.OpenAction``4(System.Action{``1,``2,``3})">
            <summary>
            Create an open instance delegate from a closed delegate.
            </summary>
            <typeparam name="T0">The class on which this delegate dispatches.</typeparam>
            <typeparam name="T1">The first method argument.</typeparam>
            <typeparam name="T2">The second method argument.</typeparam>
            <typeparam name="T3">The third method argument.</typeparam>
            <param name="instance">The current delegate instance.</param>
            <returns>An open instance delegate on <typeparamref name="T0"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="instance"/>'s declaring type is not <typeparamref name="T0"/>.</exception>
        </member>
        <member name="M:Sasa.Func.VOpenAction``1(System.Action)">
            <summary>
            Create an open instance delegate from a closed delegate.
            </summary>
            <typeparam name="T">The class on which this delegate dispatches.</typeparam>
            <param name="instance"></param>
            <returns>An open instance delegate on <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="instance"/>'s declaring type is not <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Sasa.Func.VOpenAction``2(System.Action{``1})">
            <summary>
            Create an open instance delegate from a closed delegate.
            </summary>
            <typeparam name="T0">The class on which this delegate dispatches.</typeparam>
            <typeparam name="T1">The first method argument.</typeparam>
            <param name="instance">The current delegate instance.</param>
            <returns>An open instance delegate on <typeparamref name="T0"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="instance"/>'s declaring type is not <typeparamref name="T0"/>.</exception>
        </member>
        <member name="M:Sasa.Func.VOpenAction``3(System.Action{``1,``2})">
            <summary>
            Create an open instance delegate from a closed delegate.
            </summary>
            <typeparam name="T0">The class on which this delegate dispatches.</typeparam>
            <typeparam name="T1">The first method argument.</typeparam>
            <typeparam name="T2">The second method argument.</typeparam>
            <param name="instance">The current delegate instance.</param>
            <returns>An open instance delegate on <typeparamref name="T0"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="instance"/>'s declaring type is not <typeparamref name="T0"/>.</exception>
        </member>
        <member name="M:Sasa.Func.VOpenAction``4(System.Action{``1,``2,``3})">
            <summary>
            Create an open instance delegate from a closed delegate.
            </summary>
            <typeparam name="T0">The class on which this delegate dispatches.</typeparam>
            <typeparam name="T1">The first method argument.</typeparam>
            <typeparam name="T2">The second method argument.</typeparam>
            <typeparam name="T3">The third method argument.</typeparam>
            <param name="instance">The current delegate instance.</param>
            <returns>An open instance delegate on <typeparamref name="T0"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="instance"/>'s declaring type is not <typeparamref name="T0"/>.</exception>
        </member>
        <member name="M:Sasa.Func.Getter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Obtain a getter for a property.
            </summary>
            <typeparam name="T">The class type with the getter.</typeparam>
            <typeparam name="TProperty">The return type of the property.</typeparam>
            <param name="property">A simple member access expression.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
            <remarks>
            The expression is a simple member access:
            <code>
            struct Foo
            {
              public int SomeInt { get; set; }
            }
            ...
            var getter = Func.Getter&lt;Foo, int&gt;(x =&gt; x.SomeInt);
            var foosInt = getter(someFoo);
            </code>
            </remarks>
        </member>
        <member name="M:Sasa.Func.Setter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Obtain a getter for a property.
            </summary>
            <typeparam name="T">The class type with the getter.</typeparam>
            <typeparam name="TProperty">The return type of the property.</typeparam>
            <param name="property">A simple member access expression.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
            <remarks>
            The expression is a simple member access:
            <code>
            struct Foo
            {
              public int SomeInt { get; set; }
            }
            ...
            var setter = Func.Setter&lt;Foo, int&gt;(x =&gt; x.SomeInt);
            setter(someFoo, 99);
            </code>
            </remarks>
        </member>
        <member name="M:Sasa.Func.Create``1(System.Reflection.MethodInfo)">
            <summary>
            Creates an open instance or static delegate.
            </summary>
            <typeparam name="T">The delegate type.</typeparam>
            <param name="method">The designated method to delegate to.</param>
            <returns>A delegate of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Sasa.Func.Create``1(System.Object,System.Reflection.MethodInfo)">
            <summary>
            Create a delegate.
            </summary>
            <typeparam name="T">The delegate type.</typeparam>
            <param name="target">The delegate target. If null, and <paramref name="method"/> is an instance method, it creates an "open" instance delegate.</param>
            <param name="method">The designated method to delegate to.</param>
            <returns>A delegate of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Sasa.Func.Combine``1(``0,``0)">
            <summary>
            Combine delegates into a single delegate.
            </summary>
            <typeparam name="T">The type of the delegate.</typeparam>
            <param name="first">The first delegate.</param>
            <param name="second">The second delegate.</param>
            <returns>The combined delegate.</returns>
        </member>
        <member name="M:Sasa.Func.Remove``1(``0,``0)">
            <summary>
            Combine delegates into a single delegate.
            </summary>
            <typeparam name="T">The type of the delegate.</typeparam>
            <param name="first">The first delegate.</param>
            <param name="second">The second delegate.</param>
            <returns>The combined delegate.</returns>
        </member>
        <member name="M:Sasa.Func.Combine``1(``0[])">
            <summary>
            Combine delegates into a single delegate.
            </summary>
            <typeparam name="T">The type of the delegate.</typeparam>
            <param name="delegates">The list of delegates.</param>
            <returns>The combined delegate.</returns>
        </member>
        <member name="M:Sasa.Func.Constant``2(``1)">
            <summary>
            Constructs a function that simply returns a constant value.
            </summary>
            <typeparam name="TInput">The type of input value.</typeparam>
            <typeparam name="TConst">The type of return value.</typeparam>
            <param name="value">The value to return.</param>
            <returns>Simply returns <paramref name="value"/>.</returns>
        </member>
        <member name="M:Sasa.Func.AsFunc(System.Action)">
            <summary>
            Wraps an action that returns void into a function that returns Empty.
            </summary>
            <param name="func">The delegate to wrap.</param>
            <returns>A new delegate that returns Empty on invocation.</returns>
        </member>
        <member name="M:Sasa.Func.AsFunc``1(System.Action{``0})">
            <summary>
            Wraps an action that returns void into a function that returns Empty.
            </summary>
            <param name="func">The delegate to wrap.</param>
            <returns>A new delegate that returns Empty on invocation.</returns>
        </member>
        <member name="M:Sasa.Func.AsFunc``2(System.Action{``0,``1})">
            <summary>
            Wraps an action that returns void into a function that returns Empty.
            </summary>
            <param name="func">The delegate to wrap.</param>
            <returns>A new delegate that returns Empty on invocation.</returns>
        </member>
        <member name="M:Sasa.Func.AsFunc``3(System.Action{``0,``1,``2})">
            <summary>
            Wraps an action that returns void into a function that returns Empty.
            </summary>
            <param name="func">The delegate to wrap.</param>
            <returns>A new delegate that returns Empty on invocation.</returns>
        </member>
        <member name="M:Sasa.Func.AsFunc``4(System.Action{``0,``1,``2,``3})">
            <summary>
            Wraps an action that returns void into a function that returns Empty.
            </summary>
            <param name="func">The delegate to wrap.</param>
            <returns>A new delegate that returns Empty on invocation.</returns>
        </member>
        <member name="M:Sasa.Func.Coerce``1(System.Delegate)">
            <summary>
            Coerces one delegate type to another.
            </summary>
            <typeparam name="TFunc">The return delegate type</typeparam>
            <param name="func">The source delegate to coerce.</param>
            <returns>A new delegate of the expected type.</returns>
            <exception cref="T:System.ArgumentNullException">Throw if argument is null.</exception>
            <remarks>
            Inspired by:
            http://jacobcarpenters.blogspot.com/2006/06/cast-delegate.html
            </remarks>
        </member>
        <member name="M:Sasa.Func.Generate(System.Type,System.Type,System.String,System.Reflection.MethodAttributes,System.Boolean,System.Action{System.Reflection.Emit.ILGenerator})">
            <summary>
            Create a dynamic method.
            </summary>
            <param name="delegateType">The delegate type to create.</param>
            <param name="type">The type to which this delegate should be a member.</param>
            <param name="methodName">The name of the delegate's method.</param>
            <param name="attributes">The method attributes.</param>
            <param name="saveAssembly">Flag indicating whether the generated code should be saved to a dll.</param>
            <param name="generator">A call back that performs the code generation.</param>
            <returns>An dynamically created instance of the given delegate type.</returns>
            <exception cref="T:System.ArgumentNullException">Throw if argument is null.</exception>
        </member>
        <member name="M:Sasa.Func.Generate``1(System.Type,System.String,System.Reflection.MethodAttributes,System.Boolean,System.Action{System.Reflection.Emit.ILGenerator})">
            <summary>
            Create a dynamic method.
            </summary>
            <typeparam name="T">The type of the dynamic method to create.</typeparam>
            <param name="type">The type to which this delegate should be a member.</param>
            <param name="methodName">The name of the delegate's method.</param>
            <param name="attributes">The method attributes.</param>
            <param name="saveAssembly">Flag indicating whether the generated code should be saved to a dll.</param>
            <param name="generator">A call back that performs the code generation.</param>
            <returns>An dynamically created instance of the given delegate type.</returns>
            <exception cref="T:System.ArgumentNullException">Throw if argument is null.</exception>
        </member>
        <member name="M:Sasa.Func.Generate``1(System.Type,System.String,System.Action{System.Reflection.Emit.ILGenerator})">
            <summary>
            Create a dynamic method.
            </summary>
            <typeparam name="T">The type of the dynamic method to create.</typeparam>
            <param name="type">The type to which this delegate should be a member.</param>
            <param name="methodName">The name of the delegate's method.</param>
            <param name="generator">A call back that performs the code generation.</param>
            <returns>An dynamically created instance of the given delegate type.</returns>
            <exception cref="T:System.ArgumentNullException">Throw if argument is null.</exception>
        </member>
        <member name="M:Sasa.Func.Generate``1(System.Type,System.String,System.Boolean,System.Action{System.Reflection.Emit.ILGenerator})">
            <summary>
            Create a dynamic method.
            </summary>
            <typeparam name="T">The type of the dynamic method to create.</typeparam>
            <param name="type">The type to which this delegate should be a member.</param>
            <param name="methodName">The name of the delegate's method.</param>
            <param name="saveAssembly">Flag indicating whether the generated code should be saved to a dll.</param>
            <param name="generator">A call back that performs the code generation.</param>
            <returns>An dynamically created instance of the given delegate type.</returns>
            <exception cref="T:System.ArgumentNullException">Throw if argument is null.</exception>
        </member>
        <member name="M:Sasa.Func.Invoke``1(System.Reflection.MethodBase,System.Object,System.Object[])">
            <summary>
            Invoke method.
            </summary>
            <typeparam name="T">The expected return type.</typeparam>
            <param name="method">The method to invoke.</param>
            <param name="self">The object reference for the method, null if it's a static method.</param>
            <param name="args">The method arguments.</param>
            <returns>An object of type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Throw if argument is null.</exception>
        </member>
        <member name="T:Sasa.IO.Streams">
            <summary>
            Extension methods to System.IO.Stream
            </summary>
        </member>
        <member name="M:Sasa.IO.Streams.CopyTo(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copy one stream to another.
            </summary>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
        </member>
        <member name="M:Sasa.IO.Streams.CopyTo(System.IO.Stream,System.IO.Stream,System.Int64)">
            <summary>
            Copy one stream to another.
            </summary>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
            <param name="count">The number of bytes to copy.</param>
        </member>
        <member name="M:Sasa.IO.Streams.ToArray(System.IO.Stream)">
            <summary>
            Read the full stream into a byte array.
            </summary>
            <param name="stream">The stream to read.</param>
            <returns>The contents of the stream.</returns>
        </member>
        <member name="T:Sasa.NonNull`1">
            <summary>
            This class encapsulates a non-null reference. An of this class instance serves as evidence
            that the encapsulated reference is not null.
            </summary>
            <typeparam name="T">The type of the encapsulated reference.</typeparam>
            <remarks>NonNull should only be used to decorate method arguments, and never as locals. 
            The only way an invalid instance of NonNull can be created is when declaring it as a local:
            <code>
            ...
            NonNull&lt;T&gt; foo;
            ...
            T bar = foo; // ArgumentNullException
            </code>
            When it comes to high assurance code, you should utilize Option and NonNull types for
            method arguments, to declare which arguments may be null and which must necessarily be
            non-null. The type checker will ensure that values are handled properly within the method,
            and client code will receive the errors when passing in null references for NonNull values.
            </remarks>
        </member>
        <member name="M:Sasa.NonNull`1.#ctor(`0)">
            <summary>
            Construct an assuredy non-null reference.
            </summary>
            <param name="value">The possibly null value to check.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the argument is null.</exception>
        </member>
        <member name="M:Sasa.NonNull`1.op_Implicit(Sasa.NonNull{`0})~`0">
            <summary>
            Implicit conversion back to a type T.
            </summary>
            <param name="value">The NonNull value to convert back to T.</param>
            <returns>The encapsulated T value.</returns>
        </member>
        <member name="M:Sasa.NonNull`1.Equals(`0)">
            <summary>
            Compare encapsulated values for equality.
            </summary>
            <param name="other">The value to compare against.</param>
            <returns>True if values are equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.NonNull`1.Equals(Sasa.NonNull{`0})">
            <summary>
            Compare NonNull values for equality.
            </summary>
            <param name="other">The value to compare against.</param>
            <returns>True if values are equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.NonNull`1.Equals(System.Object)">
            <summary>
            Compares equality of the encapsulated value and the given value.
            </summary>
            <param name="obj">The value to compare.</param>
            <returns>True if the values are equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.NonNull`1.GetHashCode">
            <summary>
            Return the hash code of the encapsulated value.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Sasa.NonNull`1.ToString">
            <summary>
            Returns a string representation of the encapsulated value.
            </summary>
            <returns>Returns a string representation of the encapsulated value.</returns>
        </member>
        <member name="M:Sasa.NonNull`1.op_Equality(Sasa.NonNull{`0},Sasa.NonNull{`0})">
            <summary>
            Compares two NonNull values for equality.
            </summary>
            <param name="left">The first NonNull.</param>
            <param name="right">The second NonNull.</param>
            <returns>Returns true if the NonNulls are equal, and false otherwise.</returns>
        </member>
        <member name="M:Sasa.NonNull`1.op_Inequality(Sasa.NonNull{`0},Sasa.NonNull{`0})">
            <summary>
            Compares two NonNull values for inequality.
            </summary>
            <param name="left">The first NonNull.</param>
            <param name="right">The second NonNull.</param>
            <returns>Returns true if the NonNulls are not equal, and false otherwise.</returns>
        </member>
        <member name="P:Sasa.NonNull`1.Value">
            <summary>
            Retrieves the encapsulated value.
            </summary>
        </member>
        <member name="T:Sasa.Null">
            <summary>
            Convenience functions.
            </summary>
        </member>
        <member name="M:Sasa.Null.NonNull``1(``0)">
            <summary>
            Construct a new non-null instance.
            </summary>
            <typeparam name="T">The type of the non-null reference.</typeparam>
            <param name="value">The reference to check for null.</param>
            <returns>An assuredly non-null reference.</returns>
        </member>
        <member name="T:Sasa.Operators`1">
            <summary>
            Operators defined for type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type on which the operators are defined.</typeparam>
        </member>
        <member name="F:Sasa.Operators`1.Add">
            <summary>
            Adds two arguments.
            </summary>
        </member>
        <member name="F:Sasa.Operators`1.Subtract">
            <summary>
            Subtracts two arguments.
            </summary>
        </member>
        <member name="F:Sasa.Operators`1.Divide">
            <summary>
            Divides two arguments.
            </summary>
        </member>
        <member name="F:Sasa.Operators`1.Multiply">
            <summary>
            Multiplies two arguments.
            </summary>
        </member>
        <member name="F:Sasa.Operators`1.Modulo">
            <summary>
            Takes the remainder of two arguments.
            </summary>
        </member>
        <member name="F:Sasa.Operators`1.Negate">
            <summary>
            Negates an argument.
            </summary>
        </member>
        <member name="F:Sasa.Operators`1.Increment">
            <summary>
            Increments an argument.
            </summary>
        </member>
        <member name="F:Sasa.Operators`1.Decrement">
            <summary>
            Decrements an argument.
            </summary>
        </member>
        <member name="T:Sasa.IO.DisposableFile">
            <summary>
            Disposable file.
            </summary>
        </member>
        <member name="F:Sasa.IO.DisposableFile.Path">
            <summary>
            The underlying file path.
            </summary>
        </member>
        <member name="M:Sasa.IO.DisposableFile.#ctor(System.Boolean,Sasa.IO.FilePath)">
            <summary>
            Construct a new disposable file object.
            </summary>
            <param name="createIfNotExists">Boolean indicating whether to create the file if it doesn't already exist.</param>
            <param name="path">The path to dispose of.</param>
        </member>
        <member name="M:Sasa.IO.DisposableFile.Dispose">
            <summary>
            Dispose of the file.
            </summary>
        </member>
        <member name="M:Sasa.IO.DisposableFile.Equals(Sasa.IO.DisposableFile)">
            <summary>
            Compares struct for equality.
            </summary>
            <param name="other">The object to compare to.</param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.IO.DisposableFile.Equals(System.Object)">
            <summary>
            Compares struct for equality.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.IO.DisposableFile.GetHashCode">
            <summary>
            Computes the hash code for the object.
            </summary>
            <returns>The integer hash code.</returns>
        </member>
        <member name="M:Sasa.IO.DisposableFile.op_Equality(Sasa.IO.DisposableFile,Sasa.IO.DisposableFile)">
            <summary>
            Compares struct for equality.
            </summary>
            <param name="left">The left object to compare.</param>
            <param name="right">The right object to compare.</param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.IO.DisposableFile.op_Inequality(Sasa.IO.DisposableFile,Sasa.IO.DisposableFile)">
            <summary>
            Compares struct for inequality.
            </summary>
            <param name="left">The left object to compare.</param>
            <param name="right">The right object to compare.</param>
            <returns>True if not equal, false otherwise.</returns>
        </member>
        <member name="T:Sasa.Collections.Arrays">
            <summary>
            Array extensions.
            </summary>
        </member>
        <member name="M:Sasa.Collections.Arrays.Concat``1(``0[],``0[])">
            <summary>
            Combine the values of two arrays into a new array.
            </summary>
            <typeparam name="T">The type in the array.</typeparam>
            <param name="first">The first array.</param>
            <param name="second">The second array.</param>
            <returns>Returns a new array with the values of <paramref name="first"/>, followed by the values in <paramref name="second"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Collections.Arrays.Append``1(``0[],``0)">
            <summary>
            Combine the values of two arrays into a new array.
            </summary>
            <typeparam name="T">The type in the array.</typeparam>
            <param name="array">The first array.</param>
            <param name="last">The second array.</param>
            <returns>Returns a new array with the values of <paramref name="array"/>, followed by <paramref name="last"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Collections.Arrays.Set``1(``0[],System.Int32,``0)">
            <summary>
            Sets the index of the array.
            </summary>
            <typeparam name="T">The type of array element.</typeparam>
            <param name="array">The array to set.</param>
            <param name="index">The index to set.</param>
            <param name="value">The value to set.</param>
            <returns>A new array with the slot</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Collections.Arrays.Insert``1(``0[],System.Int32,``0)">
            <summary>
            Insert a new element into an array.
            </summary>
            <typeparam name="T">The type of array element.</typeparam>
            <param name="array">The array to expand.</param>
            <param name="index">The index at which to insert the element.</param>
            <param name="value">The value to insert.</param>
            <returns>Returns a new array with the values of <paramref name="array"/>, followed by <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Collections.Arrays.Remove``1(``0[],System.Int32)">
            <summary>
            Remove an element from an array.
            </summary>
            <typeparam name="T">The type of array element.</typeparam>
            <param name="array">The array to contract.</param>
            <param name="index">The index of the element to remove.</param>
            <returns>Returns a new array with the value at <paramref name="index"/> removed from <paramref name="array"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Collections.Arrays.Create``1(``0[])">
            <summary>
            A syntactic shortcut to create arrays of values leveraging type inference.
            </summary>
            <typeparam name="T">The type of the array.</typeparam>
            <param name="values">The values to create.</param>
            <returns>An array of the provided values.</returns>
        </member>
        <member name="M:Sasa.Collections.Arrays.ToArray``2(System.Collections.Generic.IEnumerable{``1},``0@,System.Int32[],System.Int32[])">
            <summary>
            Converts a stream of values to an arbitrary dimension array.
            </summary>
            <typeparam name="TArray">The array type.</typeparam>
            <typeparam name="TElement">The array element type.</typeparam>
            <param name="array">The newly created array.</param>
            <param name="elements">The stream of elements.</param>
            <param name="lowerBounds">The array lower bounds of the array indices.</param>
            <param name="lengths">The array index lengths.</param>
            <returns>An arbitrary dimension array populated from <paramref name="elements"/>.</returns>
        </member>
        <member name="M:Sasa.Collections.Arrays.ToArray``2(System.Collections.Generic.IEnumerable{``1},System.Int32[],System.Int32[])">
            <summary>
            Converts a stream of values to an arbitrary dimension array.
            </summary>
            <typeparam name="TArray">The array type.</typeparam>
            <typeparam name="TElement">The array element type.</typeparam>
            <param name="elements">The stream of elements.</param>
            <param name="lowerBounds">The array lower bounds of the array indices.</param>
            <param name="lengths">The array index lengths.</param>
            <returns>An arbitrary dimension array populated from <paramref name="elements"/>.</returns>
        </member>
        <member name="M:Sasa.Collections.Arrays.Slice``1(``0[],System.Int32,System.Int32)">
            <summary>
            Return a slice of an array delineated by the start and end indices.
            </summary>
            <typeparam name="T">The type of the array elements.</typeparam>
            <param name="array">The array to slice.</param>
            <param name="start">The starting index of the slice.</param>
            <param name="end">The first index not included in the slice.</param>
            <returns>The array slice.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Collections.Arrays.Repeat``1(``0[],System.Int32)">
            <summary>
            Repeats all entries in <paramref name="array"/> up to <paramref name="start"/>
            as many times as will fit.
            </summary>
            <typeparam name="T">The type of the array elements.</typeparam>
            <param name="array">The array to slice.</param>
            <param name="start">The index at which to start duplicating elements.</param>
            <returns>Returns <paramref name="array"/> after the update.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Collections.Arrays.Fill``1(``0[],``0,System.Int32,System.Int32)">
            <summary>
            Populates the given array with <paramref name="item"/>, starting at the given index
            for <paramref name="count"/> entries.
            </summary>
            <typeparam name="T">The type of the array elements.</typeparam>
            <param name="array">The array.</param>
            <param name="item">The item with which to fill the array.</param>
            <param name="start">The index to start filling.</param>
            <param name="count">The number of entries to set.</param>
            <returns>Returns <paramref name="array"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Collections.Arrays.Dup``1(``0[])">
            <summary>
            Duplicates a given array.
            </summary>
            <typeparam name="T">The type of the array elements.</typeparam>
            <param name="array">The array.</param>
            <returns>A duplicate of the given array.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Collections.Arrays.Bound``1(``0[],System.Int32)">
            <summary>
            Returns an array with the given length, seeded with the values from
            <paramref name="array"/>.
            </summary>
            <typeparam name="T">The type of the array elements.</typeparam>
            <param name="array">The array.</param>
            <param name="count">The number of items in the returned array.</param>
            <returns>An array of length <paramref name="count"/>.</returns>
            <remarks>If <paramref name="count"/> equals a.Length, then the same array
            is returned. If <paramref name="count"/> is greater than a.Length, then
            a new array is created and seeded with the original values in <paramref name="array"/>
            with the remainder of the array remaining uninitialized.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Collections.Arrays.IndexOf``1(``0[],System.Predicate{``0})">
            <summary>
            Searches the array for a matching index.
            </summary>
            <typeparam name="T">The type of array elements.</typeparam>
            <param name="array">The array to index.</param>
            <param name="match">The predicate to apply.</param>
            <returns>The index of the first matching element.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="T:Sasa.Tuples">
            <summary>
            Tuple convenience functions.
            </summary>
        </member>
        <member name="M:Sasa.Tuples.Keyed``2(``0,``1)">
            <summary>
            Construct a KeyValuePair from the given values.
            </summary>
            <typeparam name="TKey">The first type.</typeparam>
            <typeparam name="TValue">The second type.</typeparam>
            <param name="key">The first value.</param>
            <param name="value">The second value.</param>
            <returns>A new KeyValuePair.</returns>
        </member>
        <member name="M:Sasa.Tuples.Create``2(``0,``1)">
            <summary>
            Construct a Pair from the given values.
            </summary>
            <typeparam name="T0">The first type.</typeparam>
            <typeparam name="T1">The second type.</typeparam>
            <param name="item0">The first value.</param>
            <param name="item1">The second value.</param>
            <returns>A new Pair.</returns>
        </member>
        <member name="M:Sasa.Tuples.Create``3(``0,``1,``2)">
            <summary>
            Construct a Triple from the given values.
            </summary>
            <typeparam name="T0">The first type.</typeparam>
            <typeparam name="T1">The second type.</typeparam>
            <typeparam name="T2">The third type.</typeparam>
            <param name="item0">The first value.</param>
            <param name="item1">The second value.</param>
            <param name="item2">The third value.</param>
            <returns>A new Triple.</returns>
        </member>
        <member name="M:Sasa.Tuples.Create``4(``0,``1,``2,``3)">
            <summary>
            Construct a Quad from the given values.
            </summary>
            <typeparam name="T0">The first type.</typeparam>
            <typeparam name="T1">The second type.</typeparam>
            <typeparam name="T2">The third type.</typeparam>
            <typeparam name="T3">The fourth type.</typeparam>
            <param name="item0">The first value.</param>
            <param name="item1">The second value.</param>
            <param name="item2">The third value.</param>
            <param name="item3">The fourth value.</param>
            <returns>A new Quad.</returns>
        </member>
        <member name="M:Sasa.Tuples.Flatten``4(Sasa.Pair{Sasa.Pair{``0,``1},Sasa.Pair{``2,``3}})">
            <summary>
            Flatten a nested pair of pairs into a Quad.
            </summary>
            <typeparam name="T0">The first type.</typeparam>
            <typeparam name="T1">The second type.</typeparam>
            <typeparam name="T2">The third type.</typeparam>
            <typeparam name="T3">The fourth type.</typeparam>
            <param name="nested">A nested tuple to flatten into a single tuple.</param>
            <returns>A flattened tuple.</returns>
        </member>
        <member name="M:Sasa.Tuples.Flatten``3(Sasa.Pair{Sasa.Pair{``0,``1},``2})">
            <summary>
            Flatten a nested pair of a pair into a Triple.
            </summary>
            <typeparam name="T0">The first type.</typeparam>
            <typeparam name="T1">The second type.</typeparam>
            <typeparam name="T2">The third type.</typeparam>
            <param name="nested">A nested tuple to flatten into a single tuple.</param>
            <returns>A flattened tuple.</returns>
        </member>
        <member name="M:Sasa.Tuples.Array``1(``0[])">
            <summary>
            A syntactic shortcut to create arrays of values leveraging type inference.
            </summary>
            <typeparam name="T">The type of the array.</typeparam>
            <param name="values">The values to create.</param>
            <returns>An array of the provided values.</returns>
        </member>
        <member name="T:Sasa.Types">
            <summary>
            Extensions to System.Type.
            </summary>
        </member>
        <member name="M:Sasa.Types.Subtypes(System.Type,System.Type)">
            <summary>
            Returns true if the given types are in a subtyping relationship.
            </summary>
            <param name="subtype">The subtype.</param>
            <param name="supertype">The potential supertype.</param>
            <returns>True if <paramref name="subtype"/> is a subtype of <paramref name="supertype"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Types.Subtypes``1(System.Type)">
            <summary>
            Returns true if the given types are in a subtyping relationship.
            </summary>
            <typeparam name="T">The potential supertype.</typeparam>
            <param name="subtype">The subtype.</param>
            <returns>True if <paramref name="subtype"/> is a subtype of <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Types.Subtypes``2">
            <summary>
            Returns true if the given types are in a subtyping relationship.
            </summary>
            <typeparam name="TSub">The subtype.</typeparam>
            <typeparam name="TSup">The potential supertype.</typeparam>
            <returns>True if <typeparamref name="TSub"/> is a subtype of <typeparamref name="TSup"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Types.ShortName(System.Type)">
            <summary>
            Return the shortest string required to identify a type.
            </summary>
            <param name="type">The type to format as a string.</param>
            <returns>A string representation of the type.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Types.ShortGenericType(System.Type,System.Type[],System.Text.StringBuilder)">
            <summary>
            Generates an abbreviated type name for a generic type definition with the specified
            generic type arguments.
            </summary>
            <param name="type">The generic type definition.</param>
            <param name="genericArguments">The generic type arguments.</param>
            <param name="output">The StringBuilder to which the type string should be written.</param>
            <returns>An abbreviated generic type name.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Types.ShortName(System.Type,System.Text.StringBuilder)">
            <summary>
            Return the shortest string required to identify a type.
            </summary>
            <param name="type">The type to format as a string.</param>
            <param name="output">The StringBuilder to which the type string should be written.</param>
            <returns>A string representation of the type.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Types.ShortGenericType(System.Type,System.Type[])">
            <summary>
            Generates an abbreviated type name for a generic type definition with the specified
            generic type arguments.
            </summary>
            <param name="type">The generic type definition.</param>
            <param name="genericArguments">The generic type arguments.</param>
            <returns>An abbreviated generic type name.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Types.IsGenericTypeInstance(System.Type)">
            <summary>
            Checks that the type is a generic type with all generic parameters specified.
            </summary>
            <param name="type">The type to test.</param>
            <returns>True if the type is instaniated with all generic parameters, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Types.Property``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Reflect on an instance property.
            </summary>
            <typeparam name="TObject">The type of object being reflected upon.</typeparam>
            <typeparam name="TField">The field type.</typeparam>
            <param name="member">A simple <see cref="T:System.Linq.Expressions.MemberExpression"/> designating the property.</param>
            <returns>A <see cref="T:System.Reflection.PropertyInfo"/> instance describing the designated property.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="member"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="member"/> is not a <see cref="T:System.Linq.Expressions.MemberExpression"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <see cref="T:System.Linq.Expressions.MemberExpression"/> does not designate a property.</exception>
            <remarks>
            The expression is a simple member access:
            <code>
            struct Foo
            {
              public int SomeInt { get; set; }
            }
            ...
            var prop = Types.Property&lt;Foo, int&gt;(x =&gt; x.SomeInt);
            var getter = prop.GetGetMethod();
            var setter = prop.GetSetMethod();
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Types.Property``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Reflect on a static property.
            </summary>
            <typeparam name="T">The type of object being reflected upon.</typeparam>
            <param name="member">A simple <see cref="T:System.Linq.Expressions.MemberExpression"/> designating the property.</param>
            <returns>The <see cref="T:System.Reflection.PropertyInfo"/> describing the designated property.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="member"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="member"/> is not a <see cref="T:System.Linq.Expressions.MemberExpression"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <see cref="T:System.Linq.Expressions.MemberExpression"/> does not designate a property.</exception>
            <remarks>
            The expression is a simple member access:
            <code>
            struct Foo
            {
              public static int SomeInt { get; set; }
            }
            ...
            var prop = Types.Property&lt;Foo, int&gt;(() =&gt; Foo.SomeInt);
            var getter = prop.GetGetMethod();
            var setter = prop.GetSetMethod();
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Types.Method``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Reflect on an instance method.
            </summary>
            <typeparam name="TObject">The type of object being reflected upon.</typeparam>
            <typeparam name="TMethod">The method type signature exposed as a delegate.</typeparam>
            <param name="target">A simple <see cref="T:System.Linq.Expressions.MemberExpression"/> designating the method.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> describing the designated method.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="target"/> is not a <see cref="T:System.Linq.Expressions.MemberExpression"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <see cref="T:System.Linq.Expressions.MemberExpression"/> does not designate a method.</exception>
            <remarks>
            The expression is a simple member access:
            <code>
            struct Foo
            {
              public int DoSomething(string x);
            }
            ...
            var method = Types.Method&lt;Func&lt;Foo, string, int&gt;&gt;(x =&gt; x.DoSomething);
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Types.Method``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Reflect on a static method.
            </summary>
            <typeparam name="T">The method type.</typeparam>
            <param name="target">A simple <see cref="T:System.Linq.Expressions.MemberExpression"/> designating the method.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> describing the designated method.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="target"/> is not a <see cref="T:System.Linq.Expressions.MemberExpression"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <see cref="T:System.Linq.Expressions.MemberExpression"/> does not designate a method.</exception>
            <remarks>
            The expression is a simple member access:
            <code>
            struct Foo
            {
              public static int DoSomething(string x);
            }
            ...
            var method = Types.Method&lt;Func&lt;string, int&gt;&gt;(() =&gt; x.DoSomething);
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Types.Constructor``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Reflect on a constructor.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="construct">A simple <see cref="T:System.Linq.Expressions.NewExpression"/> designating the method.</param>
            <returns>The <see cref="T:System.Reflection.ConstructorInfo"/> describing the constructor.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="construct"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="construct"/> is not a <see cref="T:System.Linq.Expressions.NewExpression"/>.</exception>
            <remarks>
            The expression is a simple constructor:
            <code>
            struct Foo
            {
              public Foo(int i)
              {
                ...
              }
            }
            ...
            var x = Types.Constructor(() =&gt; new Foo(3));
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Types.Method``1(``0)">
            <summary>
            Reflect on a method.
            </summary>
            <typeparam name="T">The type of object being reflected upon.</typeparam>
            <param name="member">
            The delegate instance specifying the method. Could be a static method or an instance method
            for which you have an instance nearby.
            </param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> behind the designated delegate.</returns>
            <remarks>
            The expression is a simple delegate creation:
            <code>
            struct Foo
            {
              public static int DoSomething(string x);
              public int DoSomethingElse(string x);
            }
            ...
            // get static method
            var method = Types.Method&lt;Func&lt;string, int&gt;&gt;(Foo.DoSomething);
            
            // get instance method
            Foo foo = ...
            var otherMethod = Types.Method&lt;Func&lt;Foo, string, int&gt;&gt;(foo.DoSomethingElse);
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Types.Field``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Reflect on an instance field.
            </summary>
            <typeparam name="TObject">The type of object being reflected upon.</typeparam>
            <typeparam name="TField">The field type.</typeparam>
            <param name="member">A simple <see cref="T:System.Linq.Expressions.MemberExpression"/> designating the method.</param>
            <returns>A <see cref="T:System.Reflection.FieldInfo"/> describing the designated field.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="member"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="member"/> is not a <see cref="T:System.Linq.Expressions.MemberExpression"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <see cref="T:System.Linq.Expressions.MemberExpression"/> does not designate a field.</exception>
            <remarks>
            The expression is a simple member access:
            <code>
            struct Foo
            {
              public static int Bar;
            }
            ...
            var field = Types.Field&lt;int&gt;(Foo.Bar);
            </code>
            </remarks>
        </member>
        <member name="M:Sasa.Types.Field``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Reflect over a type's static field.
            </summary>
            <typeparam name="T">The field type.</typeparam>
            <param name="member">A simple <see cref="T:System.Linq.Expressions.MemberExpression"/> designating the field.</param>
            <returns>A <see cref="T:System.Reflection.FieldInfo"/> describing the designated field.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="member"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="member"/> is not a <see cref="T:System.Linq.Expressions.MemberExpression"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <see cref="T:System.Linq.Expressions.MemberExpression"/> does not designate a field.</exception>
            <remarks>
            The expression is a simple member access:
            <code>
            struct Foo
            {
              public int Bar;
            }
            ...
            var field = Types.Field&lt;Foo, int&gt;(Foo.Bar);
            </code>
            </remarks>
        </member>
        <member name="M:Sasa.Types.Member``4(System.Linq.Expressions.Expression{``3})">
            <summary>
            Obtain information on a specific member.
            </summary>
            <typeparam name="TInfo">The specific type of <see cref="T:System.Reflection.MemberInfo"/> to obtain.</typeparam>
            <typeparam name="TConstraint">The constraint on <typeparamref name="TMember"/>.</typeparam>
            <typeparam name="TMember">The type of the member.</typeparam>
            <typeparam name="TExp">The type of the expression delegate.</typeparam>
            <param name="member">The expression referencing the member.</param>
            <returns>The designated <see cref="T:System.Reflection.MemberInfo"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="member"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="member"/> is not a <see cref="T:System.Linq.Expressions.MemberExpression"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <see cref="T:System.Linq.Expressions.MemberExpression"/> is not of the type <typeparamref name="TInfo"/>.</exception>
        </member>
        <member name="M:Sasa.Types.GetTypeTree(System.Type)">
            <summary>
            Generates a serialized tree of all type constructors and their type arguments.
            </summary>
            <param name="type">The type to process.</param>
            <returns>A flat list of all non-generic type arguments used in <paramref name="type"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="type"/> is null.</exception>
            <remarks>
            This method returns a flat sequence representing the fully nested type tree, in preorder traversal order.
            For instance:
            <code>
            var args = typeof(Pair&lt;int, Pair&lt;string,char&gt;&gt;).GetTypeTree();
            // args = new[] {
            //     typeof(Pair&lt;int, Pair&lt;string, char&gt;&gt;),
            //     typeof(Pair&lt;,&gt;),
            //          typeof(int),
            //          typeof(Pair&lt;string, char&gt;),
            //          typeof(Pair&lt;,&gt;),
            //              typeof(string), typeof(char) };
            </code>
            </remarks>
        </member>
        <member name="M:Sasa.Types.Create(System.String,System.Boolean,System.Action{System.Reflection.Emit.TypeBuilder})">
            <summary>
            Generate a dynamic type.
            </summary>
            <param name="name">The type name.</param>
            <param name="saveAssembly">Flag indicating whether the dynamic assembly should be saved.</param>
            <param name="generate">The callback used to generate the type.</param>
            <returns>The created type.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="T:Sasa.Atomics">
            <summary>
            Extensions to System.Threading.Interlocked.
            </summary>
        </member>
        <member name="M:Sasa.Atomics.Set(System.Int64@,System.Int64,System.Int64)">
            <summary>
            Perform an atomic set.
            </summary>
            <param name="slot">The slot in which to place the new value.</param>
            <param name="value">The new value to place in the slot.</param>
            <param name="comparand">The current value of the slot.</param>
            <returns>Returns true if successfully updated, false if another thread updated instead.</returns>
        </member>
        <member name="M:Sasa.Atomics.Set``1(``0@,``0,``0)">
            <summary>
            Perform an atomic set.
            </summary>
            <typeparam name="T">The type of value being swapped.</typeparam>
            <param name="slot">The slot in which to place the new value.</param>
            <param name="value">The new value to place in the slot.</param>
            <param name="comparand">The current value of the slot.</param>
            <returns>Returns true if successfully updated, false if another thread updated instead.</returns>
        </member>
        <member name="M:Sasa.Atomics.Set``1(``0@,``0)">
            <summary>
            Perform an atomic set.
            </summary>
            <typeparam name="T">The type of value being swapped.</typeparam>
            <param name="slot">The slot in which to place the new value.</param>
            <param name="value">The new value to place in the slot.</param>
            <returns>Returns true if successfully updated, false if another thread updated instead.</returns>
        </member>
        <member name="M:Sasa.Atomics.Set``1(Sasa.Ref{``0},``0,``0)">
            <summary>
            Perform an atomic set.
            </summary>
            <typeparam name="T">The type of value being swapped.</typeparam>
            <param name="slot">The slot in which to place the new value.</param>
            <param name="value">The new value to place in the slot.</param>
            <param name="comparand">The current value of the slot.</param>
            <returns>Returns true if successfully updated, false if another thread updated instead.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Atomics.Set``1(Sasa.Ref{``0},``0)">
            <summary>
            Perform an atomic set.
            </summary>
            <typeparam name="T">The type of value being swapped.</typeparam>
            <param name="slot">The slot in which to place the new value.</param>
            <param name="value">The new value to place in the slot.</param>
            <returns>Returns true if successfully updated, false if another thread updated instead.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Atomics.SetFailed``1(``0@,``0,``0)">
            <summary>
            Perform an atomic set.
            </summary>
            <typeparam name="T">The type of value being swapped.</typeparam>
            <param name="slot">The slot in which to place the new value.</param>
            <param name="value">The new value to place in the slot.</param>
            <param name="comparand">The current value of the slot.</param>
            <returns>Returns true if successfully updated, false if another thread updated instead.</returns>
        </member>
        <member name="M:Sasa.Atomics.SetFailed``1(``0@,``0)">
            <summary>
            Perform an atomic set.
            </summary>
            <typeparam name="T">The type of value being swapped.</typeparam>
            <param name="slot">The slot in which to place the new value.</param>
            <param name="value">The new value to place in the slot.</param>
            <returns>Returns true if successfully updated, false if another thread updated instead.</returns>
        </member>
        <member name="M:Sasa.Atomics.SetFailed``1(Sasa.Ref{``0},``0,``0)">
            <summary>
            Perform an atomic set.
            </summary>
            <typeparam name="T">The type of value being swapped.</typeparam>
            <param name="slot">The slot in which to place the new value.</param>
            <param name="value">The new value to place in the slot.</param>
            <param name="comparand">The current value of the slot.</param>
            <returns>Returns true if successfully updated, false if another thread updated instead.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Atomics.SetFailed``1(Sasa.Ref{``0},``0)">
            <summary>
            Perform an atomic set.
            </summary>
            <typeparam name="T">The type of value being swapped.</typeparam>
            <param name="slot">The slot in which to place the new value.</param>
            <param name="value">The new value to place in the slot.</param>
            <returns>Returns true if successfully updated, false if another thread updated instead.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="T:Sasa.Weak`1">
            <summary>
            Exposes a strongly typed interface to an encapsulated WeakReference.
            </summary>
            <typeparam name="T">The type of the object in the WeakReference.</typeparam>
        </member>
        <member name="T:Sasa.IRef`1">
            <summary>
            A mutable reference.
            </summary>
            <typeparam name="T">The type of value the reference contains.</typeparam>
        </member>
        <member name="P:Sasa.IRef`1.Value">
            <summary>
            The value in the reference.
            </summary>
            <exception cref="T:System.Exception">
            Implementations of <see cref="T:Sasa.IValue`1"/> may throw many different types of exceptions.
            </exception>
        </member>
        <member name="M:Sasa.Weak`1.#ctor(System.WeakReference)">
            <summary>
            Construct a typed weak reference from the given WeakReference.
            </summary>
            <param name="reference">The WeakReference to encapsulate.</param>
            <exception cref="T:System.InvalidCastException">If the provided WeakReference does not point
            to an object of type T.</exception>
        </member>
        <member name="M:Sasa.Weak`1.#ctor(`0)">
            <summary>
            Encapsulate the given object in a Weak ref.
            </summary>
            <param name="value">The object to encapsulate in a Weak reference.</param>
        </member>
        <member name="M:Sasa.Weak`1.TryGetValue(`0@)">
            <summary>
            Extract the value behind the weak reference.
            </summary>
            <param name="value">The underlying value.</param>
            <returns>True if the value is alive, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Weak`1.Equals(`0)">
            <summary>
            Compares the given object for equality.
            </summary>
            <param name="other">The object to compare against.</param>
            <returns>True if the underlying object is equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Weak`1.Equals(Sasa.Weak{`0})">
            <summary>
            Compares the given object for equality.
            </summary>
            <param name="other">The object to compare against.</param>
            <returns>True if the underlying object is equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Weak`1.Equals(System.Object)">
            <summary>
            Equality test.
            </summary>
            <param name="obj">The object to compare for equality.</param>
            <returns>True if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Weak`1.GetHashCode">
            <summary>
            Hashcode override.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sasa.Weak`1.Equals(System.WeakReference)">
            <summary>
            Compares the given object for equality.
            </summary>
            <param name="other">The object to compare against.</param>
            <returns>True if the underlying object is equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Weak`1.op_Implicit(`0)~Sasa.Weak{`0}">
            <summary>
            Implicitly convert a value of type T to a Weak ref if needed.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Weak reference to the value.</returns>
        </member>
        <member name="M:Sasa.Weak`1.op_Implicit(Sasa.Weak{`0})~`0">
            <summary>
            Implicitly extract the value encapsulated in the Weak ref.
            </summary>
            <param name="weak">The Weak reference from which to extract the value.</param>
            <returns>The value encapsulated in the Weak ref.</returns>
        </member>
        <member name="M:Sasa.Weak`1.op_Implicit(Sasa.Weak{`0})~System.WeakReference">
            <summary>
            Implicitly extract the WeakReference encapsulated in the Weak value.
            </summary>
            <param name="weak">The Weak reference from which to extract the WeakReference.</param>
            <returns>The WeakReference encapsulated in the Weak value.</returns>
        </member>
        <member name="M:Sasa.Weak`1.op_Equality(Sasa.Weak{`0},Sasa.Weak{`0})">
            <summary>
            Compares two weak references for equality.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Weak`1.op_Inequality(Sasa.Weak{`0},Sasa.Weak{`0})">
            <summary>
            Compares two weak references for inequality.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if not equal, false otherwise.</returns>
        </member>
        <member name="P:Sasa.Weak`1.Value">
            <summary>
            Access the underlying value, if it still exists.
            </summary>
        </member>
        <member name="P:Sasa.Weak`1.IsAlive">
            <summary>
            True if the reference is still alive.
            </summary>
        </member>
        <member name="P:Sasa.Weak`1.HasValue">
            <summary>
            True if the reference is still alive.
            </summary>
        </member>
        <member name="T:Sasa.Pair`2">
            <summary>
            A 2-element tuple type.
            </summary>
            <typeparam name="T0">Type of Pair.First.</typeparam>
            <typeparam name="T1">Type of Pair.Second.</typeparam>
        </member>
        <member name="M:Sasa.Pair`2.#ctor(`0,`1)">
            <summary>
            Construct a new Pair.
            </summary>
            <param name="first">Value of the first element.</param>
            <param name="second">Value of the second element.</param>
        </member>
        <member name="M:Sasa.Pair`2.Bind(`0@,`1@)">
            <summary>
            Bind all tuple elements to locals.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
        </member>
        <member name="M:Sasa.Pair`2.ToKeyValue">
            <summary>
            Convert a Pair to a KeyValuePair.
            </summary>
            <returns>A KeyValuePair, where Key=First, Value=Second.</returns>
        </member>
        <member name="M:Sasa.Pair`2.Equals(Sasa.Pair{`0,`1})">
            <summary>
            Test Pair equality element-wise.
            </summary>
            <param name="other"></param>
            <returns>True if the pairs are equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Pair`2.Equals(System.Object)">
            <summary>
            Test equality.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Pair`2.GetHashCode">
            <summary>
            Compute hash code.
            </summary>
            <returns>Hash code for the encapsulated values.</returns>
        </member>
        <member name="M:Sasa.Pair`2.CompareTo(Sasa.Pair{`0,`1})">
            <summary>
            Compare the two values, Pair.First first, then Pair.Second if Pair.First are equal.
            </summary>
            <param name="other">The Pair to compare against.</param>
            <returns>
            Returns zero if the pairs are equal element-wise, returns a number greater than zero if
            the current pair is greater than <paramref name="other"/> element-wise, else returns a
            number greater than zero.
            </returns>
        </member>
        <member name="M:Sasa.Pair`2.ToString">
            <summary>
            Return a string representation of this Pair.
            </summary>
            <returns>A string representation of this Pair.</returns>
        </member>
        <member name="M:Sasa.Pair`2.op_Implicit(Sasa.Pair{`0,`1})~System.Collections.Generic.KeyValuePair{`0,`1}">
            <summary>
            Implicitly convert Pair to KeyValuePair.
            </summary>
            <param name="pair">The Pair to convert.</param>
            <returns>A KeyValuePair, where Key=First, Value=Second.</returns>
        </member>
        <member name="M:Sasa.Pair`2.op_Implicit(System.Collections.Generic.KeyValuePair{`0,`1})~Sasa.Pair{`0,`1}">
            <summary>
            Implicitly convert KeyValuePair to Pair.
            </summary>
            <param name="pair">The KeyValuePair to convert.</param>
            <returns>A new Pair instance, where First=Key, and Second=Value.</returns>
        </member>
        <member name="M:Sasa.Pair`2.op_Equality(Sasa.Pair{`0,`1},Sasa.Pair{`0,`1})">
            <summary>
            Compares two Pairs for equality.
            </summary>
            <param name="left">The first Pair.</param>
            <param name="right">The second Pair.</param>
            <returns>True if the Pairs are equal, and false otherwise.</returns>
        </member>
        <member name="M:Sasa.Pair`2.op_Inequality(Sasa.Pair{`0,`1},Sasa.Pair{`0,`1})">
            <summary>
            Compares two Pairs for inequality.
            </summary>
            <param name="left">The first Pair.</param>
            <param name="right">The second Pair.</param>
            <returns>True if the Pairs are not equal, and false otherwise.</returns>
        </member>
        <member name="M:Sasa.Pair`2.op_LessThan(Sasa.Pair{`0,`1},Sasa.Pair{`0,`1})">
            <summary>
            Orders two pairs.
            </summary>
            <param name="left">The first Pair.</param>
            <param name="right">The second Pair.</param>
            <returns>
            True if <paramref name="left"/> is less than <paramref name="right"/>, false otherwise.
            </returns>
        </member>
        <member name="M:Sasa.Pair`2.op_GreaterThan(Sasa.Pair{`0,`1},Sasa.Pair{`0,`1})">
            <summary>
            Orders two pairs.
            </summary>
            <param name="left">The first Pair.</param>
            <param name="right">The second Pair.</param>
            <returns>
            True if <paramref name="left"/> is greater than <paramref name="right"/>, false otherwise.
            </returns>
        </member>
        <member name="M:Sasa.Pair`2.op_LessThanOrEqual(Sasa.Pair{`0,`1},Sasa.Pair{`0,`1})">
            <summary>
            Orders two pairs.
            </summary>
            <param name="left">The first Pair.</param>
            <param name="right">The second Pair.</param>
            <returns>
            True if <paramref name="left"/> is less than or equal to <paramref name="right"/>, false otherwise.
            </returns>
        </member>
        <member name="M:Sasa.Pair`2.op_GreaterThanOrEqual(Sasa.Pair{`0,`1},Sasa.Pair{`0,`1})">
            <summary>
            Orders two pairs.
            </summary>
            <param name="left">The first Pair.</param>
            <param name="right">The second Pair.</param>
            <returns>
            True if <paramref name="left"/> is greater than or equal to <paramref name="right"/>, false otherwise.
            </returns>
        </member>
        <member name="P:Sasa.Pair`2.First">
            <summary>
            First element of the tuple.
            </summary>
        </member>
        <member name="P:Sasa.Pair`2.Second">
            <summary>
            Second element of the tuple.
            </summary>
        </member>
        <member name="T:Sasa.Strings">
            <summary>
            String extension methods.
            </summary>
        </member>
        <member name="M:Sasa.Strings.IsNullOrEmpty(System.String)">
            <summary>
            Returns true if string is null or empty.
            </summary>
            <param name="input">The string to test.</param>
            <returns>True if the string is null or of length 0.</returns>
        </member>
        <member name="M:Sasa.Strings.IfNullOrEmpty(System.String,System.String)">
            <summary>
            Ensures returned string is not null or empty.
            </summary>
            <param name="input">The string to test.</param>
            <param name="otherwise">The string to return if <paramref name="input"/> is null or empty.</param>
            <returns>Returns the string if the not null or of length 0, or 'otherwise' otherwise.</returns>
        </member>
        <member name="M:Sasa.Strings.IfNullOrEmpty``1(System.String,``0)">
            <summary>
            Ensures returned string is not null or empty.
            </summary>
            <param name="input">The string to test.</param>
            <param name="otherwise">The object to return if <paramref name="input"/> is null or empty.</param>
            <returns>Returns the string if the not null or of length 0, or 'otherwise' otherwise.</returns>
        </member>
        <member name="M:Sasa.Strings.Slice(System.String,System.Int32,System.Int32)">
            <summary>
            Return a slice of a string delineated by the start and end indices.
            </summary>
            <param name="value">The string to slice.</param>
            <param name="start">The start of the slice.</param>
            <param name="end">The end of the slice.</param>
            <returns>The string slice.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Strings.ToFilePath(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a filesystem path given a stream of path components.
            </summary>
            <param name="components">The sequence of component paths.</param>
            <returns>A file system path separated by the OS-specific separator character.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Strings.ToFilePath(System.String[])">
            <summary>
            Returns a filesystem path given an array of path components.
            </summary>
            <param name="components">The array of component paths.</param>
            <returns>A file system path separated by the OS-specific separator character.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Strings.WordWrapAt(System.String,System.Int32)">
            <summary>
            Wraps the string at the given column index.
            </summary>
            <param name="input">The string to process.</param>
            <param name="column">The column at which to wrap the string.</param>
            <returns>A stream of strings representing the wrapped lines. String.Length is &lt;= column.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Strings.HardWrapAt(System.String,System.Int32)">
            <summary>
            Wraps the string at the given column index.
            </summary>
            <param name="input">The string to process.</param>
            <param name="column">The column at which to wrap the string.</param>
            <returns>A stream of strings representing the wrapped lines. String.Length is &lt;= column.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Strings.HardWrapAt(System.String,System.Int32,System.StringSplitOptions)">
            <summary>
            Wraps the string at the given column index.
            </summary>
            <param name="input">The string to process.</param>
            <param name="column">The column at which to wrap the string.</param>
            <param name="options">The split options to use when returning lines.</param>
            <returns>A stream of strings representing the wrapped lines. String.Length is &lt;= column.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Strings.Lines(System.String)">
            <summary>
            Returns the string split into individual lines.
            </summary>
            <param name="input">The string to split.</param>
            <returns>An array of all the lines in the string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Strings.Lines(System.String,System.StringSplitOptions)">
            <summary>
            Returns the string split into individual lines.
            </summary>
            <param name="input">The string to split.</param>
            <param name="options">The options to use when creating lines.</param>
            <returns>An array of all the lines in the string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Strings.Words(System.String)">
            <summary>
            Returns an array split by whitespace.
            </summary>
            <param name="input">The string to split.</param>
            <returns>An array of strings which were separate by whitespace in the original string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Strings.ToBase64(System.String,System.String)">
            <summary>
            Convert a string to Base64.
            </summary>
            <param name="input">The string to convert.</param>
            <param name="encoding">The string encoding to use.</param>
            <returns>The Base64-encoded string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Strings.ToBase64(System.String)">
            <summary>
            Convert a string to Base64.
            </summary>
            <param name="input">The string to convert.</param>
            <returns>The Base64-encoded string in UTF-8 encoding.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Strings.FromBase64(System.String,System.String)">
            <summary>
            Convert a string from a Base64 encoded string to another string.
            </summary>
            <param name="input">The string the convert.</param>
            <param name="encoding">The string encoding to use.</param>
            <returns>The unencoded string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Strings.FromBase64(System.String)">
            <summary>
            Convert a string from a Base64 encoded string to another string using UTF-8 encoding.
            </summary>
            <param name="input">The string the convert.</param>
            <returns>The decoded string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Strings.Split(System.String,System.StringSplitOptions,System.Char[])">
            <summary>
            Split the string according to the given options and delimiters.
            </summary>
            <param name="input">The input string.</param>
            <param name="options">The options to use when splitting the string.</param>
            <param name="delimiter">The delimiters used to split the string.</param>
            <returns>The split string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Strings.Split(System.String,System.StringSplitOptions,System.String[])">
            <summary>
            Split the string according to the given options and delimiters.
            </summary>
            <param name="input">The input string.</param>
            <param name="options">The options to use when splitting the string.</param>
            <param name="delimiter">The delimiters used to split the string.</param>
            <returns>The split string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Strings.SliceEquals(System.String,System.Int32,System.String)">
            <summary>
            Checks the value of a substring.
            </summary>
            <param name="value">The string to inspect.</param>
            <param name="start">The index at which to check for the substring.</param>
            <param name="sub">The string to use for comparison.</param>
            <returns>True if string <paramref name="sub"/> is found at <paramref name="value"/>[<paramref name="start"/>].</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Strings.Tokenize(System.String,System.String[])">
            <summary>
            Searches the input stream for a set of tokens.
            </summary>
            <param name="input">The input string to search.</param>
            <param name="tokens">The list of tokens to search for.</param>
            <returns>A stream of tokens.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Strings.EqualTo(System.String,System.String,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Test two strings for custom equality.
            </summary>
            <param name="first">The first string to compare.</param>
            <param name="second">The second string to compare.</param>
            <param name="comparer">The comparison to appply.</param>
            <returns>True if strings are equal according to <paramref name="comparer"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if comparer is null.</exception>
        </member>
        <member name="M:Sasa.Strings.CompareTo(System.String,System.String,System.Collections.Generic.IComparer{System.String})">
            <summary>
            Perform a custom comparison for two strings.
            </summary>
            <param name="first">The first string to compare.</param>
            <param name="second">The second string to compare.</param>
            <param name="comparer">The comparison to appply.</param>
            <returns>Returns the result of <paramref name="comparer"/>.CompareTo(<paramref name="first"/>,<paramref name="second"/>).</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Strings.Format(System.String,System.Object[])">
            <summary>
            Generate a formatted string.
            </summary>
            <param name="pattern">The format string.</param>
            <param name="substitutions">The format string substitutions.</param>
            <returns>A formatted string generated by substituting the values in <paramref name="substitutions"/> into <paramref name="pattern"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Strings.Format(System.String,System.IFormatProvider,System.Object[])">
            <summary>
            Generate a formatted string.
            </summary>
            <param name="provider">The format provider.</param>
            <param name="pattern">The format string.</param>
            <param name="substitutions">The format string substitutions.</param>
            <returns>A formatted string generated by substituting the values in <paramref name="substitutions"/> into <paramref name="pattern"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="T:Sasa.Strings.Token">
            <summary>
            Tokens identified by the Tokenize function.
            </summary>
        </member>
        <member name="M:Sasa.Strings.Token.Equals(Sasa.Strings.Token)">
            <summary>
            Compares struct for equality.
            </summary>
            <param name="other">The object to compare to.</param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Strings.Token.Equals(System.Object)">
            <summary>
            Compares struct for equality.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Strings.Token.GetHashCode">
            <summary>
            Computes the hash code for the object.
            </summary>
            <returns>The integer hash code.</returns>
        </member>
        <member name="M:Sasa.Strings.Token.op_Equality(Sasa.Strings.Token,Sasa.Strings.Token)">
            <summary>
            Compares struct for equality.
            </summary>
            <param name="left">The left object to compare.</param>
            <param name="right">The right object to compare.</param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Strings.Token.op_Inequality(Sasa.Strings.Token,Sasa.Strings.Token)">
            <summary>
            Compares struct for inequality.
            </summary>
            <param name="left">The left object to compare.</param>
            <param name="right">The right object to compare.</param>
            <returns>True if not equal, false otherwise.</returns>
        </member>
        <member name="P:Sasa.Strings.Token.Index">
            <summary>
            The index marking the beginning of the token.
            </summary>
        </member>
        <member name="P:Sasa.Strings.Token.Tok">
            <summary>
            The token identified.
            </summary>
        </member>
        <member name="P:Sasa.Strings.Token.Input">
            <summary>
            The input string being searched.
            </summary>
        </member>
        <member name="T:Sasa.Collections.IAtomic`1">
            <summary>
            A value type that can be updated atomically.
            </summary>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="M:Sasa.Collections.IAtomic`1.Set(`0@)">
            <summary>
            The update operation.
            </summary>
            <param name="slot">The slot to update atomically.</param>
            <returns>True if the slot was set, false otherwise.</returns>
        </member>
        <member name="T:Sasa.Web.Url64">
            <summary>
            Encodes bytes into a base64 alphabet that is safe to embed into URLs.
            </summary>
        </member>
        <member name="M:Sasa.Web.Url64.ToUrl64(System.Byte[])">
            <summary>
            Convert bytes to a Url64 string.
            </summary>
            <param name="data">The binary data.</param>
            <returns>The equivalent Url64 encoded string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Web.Url64.ToUrl64(System.Byte[],System.Text.StringBuilder)">
            <summary>
            Convert bytes to a Url64 string.
            </summary>
            <param name="data">The binary data.</param>
            <param name="output">The output string.</param>
            <returns>The equivalent Url64 encoded string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Web.Url64.ToUrl64(System.Byte[],System.Int32,System.Int32,System.Text.StringBuilder)">
            <summary>
            Convert bytes to a Url64 string.
            </summary>
            <param name="data">The bytes to convert.</param>
            <param name="startIndex">The starting index into the byte array.</param>
            <param name="count">The number of bytes to convert.</param>
            <param name="output">The encoded bytes are output to this StringBuilder.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Web.Url64.FromUrl64(System.String)">
            <summary>
            Convert from a Url64 string representation back to binary.
            </summary>
            <param name="data">The string in Url64 form.</param>
            <returns>The decoded bytes corresponding to the given string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="T:Sasa.Linq.Enumerables">
            <summary>
            Extensions to IEnumerable.
            </summary>
            <summary>
            Extension on <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Consumes a sequence while applying a function to each element.
            </summary>
            <typeparam name="T">The type being enumerated.</typeparam>
            <param name="source">The enumerator.</param>
            <param name="func">The function to apply.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Apply``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Apply a function to each element of the collection.
            </summary>
            <typeparam name="T">The type being enumerated.</typeparam>
            <param name="source">The enumerator.</param>
            <param name="func">The function to aplpy.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Push``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the given item to the beginning of a sequence.
            </summary>
            <typeparam name="T">The type being enumerated.</typeparam>
            <param name="head">The new first element of the enumeration.</param>
            <param name="tail">The rest of the enumeration.</param>
            <returns>An enumeration with 'head' as the first value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Append an item to the end of an enumeration.
            </summary>
            <typeparam name="T">The type being enumerated.</typeparam>
            <param name="source">The enumeration being modified.</param>
            <param name="last">The element being appended to the enumeration.</param>
            <returns>An enumeration with a new last element.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Linq.Enumerables.ReplaceElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <typeparam name="T">The enumerated type.</typeparam>
            <param name="source">The source enumeration.</param>
            <param name="index">The element at this index is replaced.</param>
            <param name="value">The new value to insert.</param>
            <returns>An enumeration with the replaced value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Flatten``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Flattens a nested enumerable.
            </summary>
            <typeparam name="T">The type being enumerated.</typeparam>
            <param name="source">The nested enumerable.</param>
            <returns>A flattened stream.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Format``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Formats each element of the stream with the given separator between them.
            </summary>
            <typeparam name="T">The type being enumerated.</typeparam>
            <param name="source">The input stream to format.</param>
            <param name="separator">The element separating each element of the stream.</param>
            <returns>A formatted string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Format``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String})">
            <summary>
            Formats each element of the stream with the given separator between them.
            </summary>
            <typeparam name="T">The type being enumerated.</typeparam>
            <param name="source">The input stream to format.</param>
            <param name="separator">The element separating each element of the stream.</param>
            <param name="toString">The function used to convert each element to a string.</param>
            <returns>A formatted string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Format``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Text.StringBuilder)">
            <summary>
            Formats each element of the stream with the given separator between them.
            </summary>
            <typeparam name="T">The type being enumerated.</typeparam>
            <param name="source">The input stream to format.</param>
            <param name="separator">The element separating each element of the stream.</param>
            <param name="output">The StringBuilder to which the output is written.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Format``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Text.StringBuilder,System.Func{``0,System.String})">
            <summary>
            Formats each element of the stream with the given separator between them.
            </summary>
            <typeparam name="T">The type being enumerated.</typeparam>
            <param name="source">The input stream to format.</param>
            <param name="separator">The element separating each element of the stream.</param>
            <param name="output">The StringBuilder to which the output is written.</param>
            <param name="toString">The function used to convert each element to a string.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Linq.Enumerables.CompareTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs an ordered comparison on two sequences.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="first">The first sequence.</param>
            <param name="second">The second sequence.</param>
            <returns>Zero if two sequences are equal, greater than zero if <paramref name="first"/>
            &gt; <paramref name="second"/>, less than zero otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Generate``1(``0,System.Func{``0,Sasa.Option{``0}})">
            <summary>
            Generate a sequence of elements given a generator function.
            </summary>
            <typeparam name="T">The type of sequence elements.</typeparam>
            <param name="seed">The initial seed value.</param>
            <param name="generator">The generator function.</param>
            <returns>A sequence of elements.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Linq.Enumerables.CopyTo``1(System.Collections.Generic.IEnumerable{``0},``0[],System.Int32)">
            <summary>
            Copy the elements of the stream to the given array starting at the given index.
            </summary>
            <typeparam name="T">The type of array elements.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="array">The target array.</param>
            <param name="start">The starting index of the array.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Linq.Enumerables.CopyTo``1(System.Collections.Generic.IEnumerable{``0},``0[],System.Int32,System.Int32)">
            <summary>
            Copy the elements of the stream to the given array starting at the given index.
            </summary>
            <typeparam name="T">The type of array elements.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="array">The target array.</param>
            <param name="start">The starting index of the array.</param>
            <param name="count">The number of elements to copy.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="start"/> or <paramref name="count"/> index a location
            outside the bounds of <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Consume``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Consumes the entire sequence.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="source">The source sequence to consume.</param>
            <remarks>
            This is primarily of use to enumerators that induce side-effects while
            producing values. Consume forces the side-effects eagerly instead of
            lazily.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Transpose``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Swaps the rows and columns of a nested sequence.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>A sequence whose rows and columns are swapped.</returns>
            <remarks>
            Note that this method will handle jagged sequences, but transposing
            twice will not necessarily recover the same sequence as the original
            input. All the jagged entries will be pushed to the last row.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Linq.Enumerables.ZipWith``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Zip two streams to a user-defined type.
            </summary>
            <typeparam name="T0">The type of the first stream.</typeparam>
            <typeparam name="T1">The type of the second stream.</typeparam>
            <typeparam name="T2">The type of the returned stream.</typeparam>
            <param name="first">The first stream.</param>
            <param name="second">The second stream.</param>
            <param name="selector">The function mapping the given stream values into the return value.</param>
            <returns>A stream of return values.</returns>
        </member>
        <member name="M:Sasa.Linq.Enumerables.ZipWith``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Func{``0,``1,``2,``3})">
            <summary>
            Zip three streams to a user-defined type.
            </summary>
            <typeparam name="T0">The type of the first stream.</typeparam>
            <typeparam name="T1">The type of the second stream.</typeparam>
            <typeparam name="T2">The type of the third stream.</typeparam>
            <typeparam name="T3">The type of the returned stream.</typeparam>
            <param name="first">The first stream.</param>
            <param name="second">The second stream.</param>
            <param name="third">The third stream.</param>
            <param name="selector">The function mapping the given stream values into the return value.</param>
            <returns>A stream of return values.</returns>
        </member>
        <member name="M:Sasa.Linq.Enumerables.ZipWith``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Zip four streams to a user-defined type.
            </summary>
            <typeparam name="T0">The type of the first stream.</typeparam>
            <typeparam name="T1">The type of the second stream.</typeparam>
            <typeparam name="T2">The type of the third stream.</typeparam>
            <typeparam name="T3">The type of the fourth stream.</typeparam>
            <typeparam name="T4">The type of the returned stream.</typeparam>
            <param name="first">The first stream.</param>
            <param name="second">The second stream.</param>
            <param name="third">The third stream.</param>
            <param name="fourth">The fourth stream.</param>
            <param name="selector">The function mapping the given stream values into the return value.</param>
            <returns>A stream of return values.</returns>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Pair the elements of two streams.
            </summary>
            <typeparam name="T0">The type of the first stream.</typeparam>
            <typeparam name="T1">The type of the second stream.</typeparam>
            <param name="first">The first stream.</param>
            <param name="second">The second stream.</param>
            <returns>A stream of tupled values.</returns>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})">
            <summary>
            Zip the elements of three streams.
            </summary>
            <typeparam name="T0">The type of the first stream.</typeparam>
            <typeparam name="T1">The type of the second stream.</typeparam>
            <typeparam name="T2">The type of the third stream.</typeparam>
            <param name="first">The first stream.</param>
            <param name="second">The second stream.</param>
            <param name="third">The third stream.</param>
            <returns>A stream of tupled values.</returns>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Zip``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3})">
            <summary>
            Zip the elements of four streams.
            </summary>
            <typeparam name="T0">The type of the first stream.</typeparam>
            <typeparam name="T1">The type of the second stream.</typeparam>
            <typeparam name="T2">The type of the third stream.</typeparam>
            <typeparam name="T3">The type of the fourth stream.</typeparam>
            <param name="first">The first stream.</param>
            <param name="second">The second stream.</param>
            <param name="third">The third stream.</param>
            <param name="fourth">The fourth stream.</param>
            <returns>A stream of tupled values.</returns>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Difference``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Compute the set of differences between two sequences.
            </summary>
            <typeparam name="T">The type of sequence items.</typeparam>
            <param name="original">The original sequence.</param>
            <param name="updated">The updated sequence to compare to.</param>
            <returns>The smallest sequence of changes to transform <paramref name="original"/> into <paramref name="updated"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Difference(System.String,System.String)">
            <summary>
            Compute the set of differences between two sequences.
            </summary>
            <param name="original">The original sequence.</param>
            <param name="updated">The updated sequence to compare to.</param>
            <returns>The smallest sequence of changes to transform <paramref name="original"/> into <paramref name="updated"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Difference``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compute the set of differences between two sequences.
            </summary>
            <typeparam name="T">The type of sequence items.</typeparam>
            <param name="original">The original sequence.</param>
            <param name="updated">The updated sequence to compare to.</param>
            <param name="comparer">The equality comparer to use.</param>
            <returns>The smallest sequence of changes to transform <paramref name="original"/> into <paramref name="updated"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Difference``1(``0[],``0[],System.Func{``0,``0,System.Boolean})">
            <summary>
            Compute the set of differences between two sequences.
            </summary>
            <typeparam name="T">The type of sequence items.</typeparam>
            <param name="n">The original sequence.</param>
            <param name="m">The updated sequence to compare to.</param>
            <param name="comparer">The equality comparer to use.</param>
            <returns>The smallest sequence of changes to transform <paramref name="n"/> into <paramref name="m"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="T:Sasa.Ref`1">
            <summary>
            Simple reference.
            </summary>
            <typeparam name="T">The type of the encapsulated value.</typeparam>
        </member>
        <member name="P:Sasa.Ref`1.Value">
            <summary>
            The encapsulated value.
            </summary>
        </member>
        <member name="T:Sasa.Immutable`1">
            <summary>
            An immutable value.
            </summary>
            <typeparam name="T">The type of the encapsulated value.</typeparam>
        </member>
        <member name="M:Sasa.Immutable`1.#ctor(`0)">
            <summary>
            Constructs an instance of a value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sasa.Immutable`1.op_Implicit(`0)~Sasa.Immutable{`0}">
            <summary>
            Implicitly wrap a value in an <see cref="T:Sasa.Immutable`1"/>.
            </summary>
            <param name="value">The value to wrap.</param>
            <returns>An immutable wrapper.</returns>
        </member>
        <member name="M:Sasa.Immutable`1.Equals(`0)">
            <summary>
            Check for equality.
            </summary>
            <param name="other">The object to compare to.</param>
            <returns>True if the encapsulated values are equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Immutable`1.Equals(Sasa.Immutable{`0})">
            <summary>
            Check for equality.
            </summary>
            <param name="other">The immutable slot to compare to.</param>
            <returns>True if the immutable slots are equal, false otherwise.</returns>
        </member>
        <member name="P:Sasa.Immutable`1.Value">
            <summary>
            The encapsulated value.
            </summary>
        </member>
        <member name="T:Sasa.Quad`4">
            <summary>
            A 4-element tuple type.
            </summary>
            <typeparam name="T0">The type of the first value.</typeparam>
            <typeparam name="T1">The type of the second value.</typeparam>
            <typeparam name="T2">The type of the third value.</typeparam>
            <typeparam name="T3">The type of the fourth value.</typeparam>
        </member>
        <member name="T:Sasa.ITuple`4">
            <summary>
            A four element tuple.
            </summary>
            <typeparam name="T0">The first argument type.</typeparam>
            <typeparam name="T1">The second argument type.</typeparam>
            <typeparam name="T2">The third argument type.</typeparam>
            <typeparam name="T3">The fourth argument type.</typeparam>
        </member>
        <member name="P:Sasa.ITuple`4.Fourth">
            <summary>
            The fourth element.
            </summary>
        </member>
        <member name="M:Sasa.Quad`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Construct a new Quad.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <param name="third">The third value.</param>
            <param name="fourth">The fourth value.</param>
        </member>
        <member name="M:Sasa.Quad`4.Bind(`0@,`1@,`2@,`3@)">
            <summary>
            Bind all tuple elements to locals.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <param name="third">The third value.</param>
            <param name="fourth">The fourth value.</param>
        </member>
        <member name="M:Sasa.Quad`4.Equals(Sasa.Quad{`0,`1,`2,`3})">
            <summary>
            Test equality of Quads element-wise.
            </summary>
            <param name="other">The other Quad to compare for equality.</param>
            <returns>True if the Quad instances match, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Quad`4.Equals(System.Object)">
            <summary>
            Test equality.
            </summary>
            <param name="obj">Object to compare for equality.</param>
            <returns>True if the objects match, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Quad`4.GetHashCode">
            <summary>
            Generate a hash code.
            </summary>
            <returns>The hash of the encapsulated values.</returns>
        </member>
        <member name="M:Sasa.Quad`4.CompareTo(Sasa.Quad{`0,`1,`2,`3})">
            <summary>
            Compare the two values, testing sequentially, Quad.First, Quad.Second
            Quad.Third, and Quad.Fourth for any values that can specify an 
            ordering.
            </summary>
            <param name="other">The Quad to compare against.</param>
            <returns>The ordering compares sequentially Quad.First, Quad.Second,
            Quad.Third and Quad.Fourth until it finds an entry that ensures an
            total order.</returns>
        </member>
        <member name="M:Sasa.Quad`4.ToString">
            <summary>
            Return a string representation of this Quad.
            </summary>
            <returns>A string representation of this Quad.</returns>
        </member>
        <member name="M:Sasa.Quad`4.op_Equality(Sasa.Quad{`0,`1,`2,`3},Sasa.Quad{`0,`1,`2,`3})">
            <summary>
            Compares two Quads for equality.
            </summary>
            <param name="left">The first Quad.</param>
            <param name="right">The second Quad.</param>
            <returns>Returns true if the Quads are equal, and false otherwise.</returns>
        </member>
        <member name="M:Sasa.Quad`4.op_Inequality(Sasa.Quad{`0,`1,`2,`3},Sasa.Quad{`0,`1,`2,`3})">
            <summary>
            Compares two Quads for inequality.
            </summary>
            <param name="left">The first Quad.</param>
            <param name="right">The second Quad.</param>
            <returns>Returns true if the Quads are not equal, and false otherwise.</returns>
        </member>
        <member name="M:Sasa.Quad`4.op_LessThan(Sasa.Quad{`0,`1,`2,`3},Sasa.Quad{`0,`1,`2,`3})">
            <summary>
            Orders two pairs.
            </summary>
            <param name="left">The first tuple.</param>
            <param name="right">The second tuple.</param>
            <returns>
            True if <paramref name="left"/> is less than <paramref name="right"/>, false otherwise.
            </returns>
        </member>
        <member name="M:Sasa.Quad`4.op_GreaterThan(Sasa.Quad{`0,`1,`2,`3},Sasa.Quad{`0,`1,`2,`3})">
            <summary>
            Orders two tuples.
            </summary>
            <param name="left">The first tuple.</param>
            <param name="right">The second tuple.</param>
            <returns>
            True if <paramref name="left"/> is greater than <paramref name="right"/>, false otherwise.
            </returns>
        </member>
        <member name="M:Sasa.Quad`4.op_LessThanOrEqual(Sasa.Quad{`0,`1,`2,`3},Sasa.Quad{`0,`1,`2,`3})">
            <summary>
            Orders two pairs.
            </summary>
            <param name="left">The first tuple.</param>
            <param name="right">The second tuple.</param>
            <returns>
            True if <paramref name="left"/> is less than or equal to <paramref name="right"/>, false otherwise.
            </returns>
        </member>
        <member name="M:Sasa.Quad`4.op_GreaterThanOrEqual(Sasa.Quad{`0,`1,`2,`3},Sasa.Quad{`0,`1,`2,`3})">
            <summary>
            Orders two tuples.
            </summary>
            <param name="left">The first tuple.</param>
            <param name="right">The second tuple.</param>
            <returns>
            True if <paramref name="left"/> is greater than or equal to <paramref name="right"/>, false otherwise.
            </returns>
        </member>
        <member name="P:Sasa.Quad`4.First">
            <summary>
            First element of the tuple.
            </summary>
        </member>
        <member name="P:Sasa.Quad`4.Second">
            <summary>
            Second element of the tuple.
            </summary>
        </member>
        <member name="P:Sasa.Quad`4.Third">
            <summary>
            Third element of the tuple.
            </summary>
        </member>
        <member name="P:Sasa.Quad`4.Fourth">
            <summary>
            Fourth element of the tuple.
            </summary>
        </member>
        <member name="T:Sasa.Option`1">
            <summary>
            Represents a possibly null value.
            </summary>
            <typeparam name="T">The type of the optional value.</typeparam>
            <remarks>
            When it comes to high assurance code, you should utilize Option and NonNull types for
            method arguments, to declare which arguments may be null and which must necessarily be
            non-null. The type checker will ensure that values are handled properly within the method,
            and client code will receive the errors when passing in null references for NonNull values.
            </remarks>
        </member>
        <member name="M:Sasa.Option`1.#ctor(`0)">
            <summary>
            Construct an optional value.
            </summary>
            <param name="value">The wrapped value.</param>
        </member>
        <member name="M:Sasa.Option`1.Equals(`0)">
            <summary>
            Compares Option&lt;T&gt; and a T for equality.
            </summary>
            <param name="other">The other object to compare to.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:Sasa.Option`1.Equals(Sasa.Option{`0})">
            <summary>
            Compares two Option&lt;T&gt; instances for equality.
            </summary>
            <param name="other">The other object to compare to.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:Sasa.Option`1.Equals(System.Nullable{Sasa.Option{`0}})">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="other">The other object to compare to.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:Sasa.Option`1.Equals(System.Object)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="obj">The other object to compare to.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:Sasa.Option`1.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Sasa.Option`1.TryGetValue(`0@)">
            <summary>
            Attempts to extract the value.
            </summary>
            <param name="value">The value extracted.</param>
            <returns>Returns true if a value was available, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Option`1.op_Implicit(`0)~Sasa.Option{`0}">
            <summary>
            An implicit conversion from any value to an optional value.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>Returns a wrapped optional reference.</returns>
        </member>
        <member name="M:Sasa.Option`1.op_Implicit(Sasa.Result{`0})~Sasa.Option{`0}">
            <summary>
            Implicit convert a <see cref="T:Sasa.Result`1"/> into an <see cref="T:Sasa.Option`1"/>.
            </summary>
            <param name="result">The result to convert.</param>
            <returns>An <see cref="T:Sasa.Option`1"/>.</returns>
        </member>
        <member name="M:Sasa.Option`1.ToString">
            <summary>
            Return a string representation.
            </summary>
            <returns>A string representation of the optional value.</returns>
        </member>
        <member name="M:Sasa.Option`1.op_Equality(Sasa.Option{`0},Sasa.Option{`0})">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The left comparand.</param>
            <param name="right">The right comparand.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:Sasa.Option`1.op_Inequality(Sasa.Option{`0},Sasa.Option{`0})">
            <summary>
            Compares two objects for inequality.
            </summary>
            <param name="left">The left comparand.</param>
            <param name="right">The right comparand.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="M:Sasa.Option`1.op_Equality(Sasa.Option{`0},System.Nullable{Sasa.Option{`0}})">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The left comparand.</param>
            <param name="right">The right comparand.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:Sasa.Option`1.op_Inequality(Sasa.Option{`0},System.Nullable{Sasa.Option{`0}})">
            <summary>
            Compares two objects for inequality.
            </summary>
            <param name="left">The left comparand.</param>
            <param name="right">The right comparand.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="M:Sasa.Option`1.op_Equality(System.Nullable{Sasa.Option{`0}},Sasa.Option{`0})">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The left comparand.</param>
            <param name="right">The right comparand.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:Sasa.Option`1.op_Inequality(System.Nullable{Sasa.Option{`0}},Sasa.Option{`0})">
            <summary>
            Compares two objects for inequality.
            </summary>
            <param name="left">The left comparand.</param>
            <param name="right">The right comparand.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="M:Sasa.Option`1.op_BitwiseOr(Sasa.Option{`0},Sasa.Option{`0})">
            <summary>
            Coalesce optional value.
            </summary>
            <param name="left">The optional value to return, if available.</param>
            <param name="right">The value to return if optional value is empty.</param>
            <returns>Returns <paramref name="left"/> if not empty, otherwise returns <paramref name="right"/>.</returns>
        </member>
        <member name="M:Sasa.Option`1.op_True(Sasa.Option{`0})">
            <summary>
            Populated optional values reduce to true.
            </summary>
            <param name="value">The optional value to check.</param>
            <returns>True if the HasValue is true.</returns>
        </member>
        <member name="M:Sasa.Option`1.op_False(Sasa.Option{`0})">
            <summary>
            Unpopulated optional values reduce to false.
            </summary>
            <param name="value">The optional value to check.</param>
            <returns>True if !HasValue.</returns>
        </member>
        <member name="P:Sasa.Option`1.Value">
            <summary>
            The wrapped value.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if it contains no value.</exception>
        </member>
        <member name="P:Sasa.Option`1.HasValue">
            <summary>
            Returns true if there is a value.
            </summary>
            <returns>True if not null.</returns>
        </member>
        <member name="P:Sasa.Option`1.None">
            <summary>
            An empty option value.
            </summary>
        </member>
        <member name="T:Sasa.Option">
            <summary>
            Option operations.
            </summary>
            <remarks>
            This class provides all the LINQ overloads needed to transparently work
            with System.Nullable&lt;T&gt; and Option&lt;&gt; in LINQ computations.
            </remarks>
        </member>
        <member name="M:Sasa.Option.ToOption``1(``0)">
            <summary>
            Construct a new optional value.
            </summary>
            <typeparam name="T">The type of the optional value.</typeparam>
            <param name="value">The value to track.</param>
            <returns></returns>
        </member>
        <member name="M:Sasa.Option.ToOption``1(System.Nullable{``0})">
            <summary>
            Construct a new optional value.
            </summary>
            <typeparam name="T">The type of the optional value.</typeparam>
            <param name="value">A nullable value.</param>
            <returns></returns>
        </member>
        <member name="M:Sasa.Option.ToNullable``1(Sasa.Option{``0})">
            <summary>
            Construct a Nullable value type given an option type.
            </summary>
            <typeparam name="T">The nullable type.</typeparam>
            <param name="option">The optional value.</param>
            <returns>A new nullable value.</returns>
        </member>
        <member name="M:Sasa.Option.Try``1(System.Func{``0})">
            <summary>
            Execute some code that may return null.
            </summary>
            <typeparam name="T">The possibly-null value.</typeparam>
            <param name="func">The code to execute.</param>
            <returns>An optional value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if an argument is null.</exception>
        </member>
        <member name="M:Sasa.Option.Try``2(System.Func{``0,``1})">
            <summary>
            Wrap a delegate that may throw exceptions.
            </summary>
            <typeparam name="T0">The argument of the delegate.</typeparam>
            <typeparam name="T1">The return type of the delegate.</typeparam>
            <param name="func">The code to execute.</param>
            <returns>A function that wraps any errors in an optional value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if an argument is null.</exception>
        </member>
        <member name="M:Sasa.Option.Try``1(System.Action{``0})">
            <summary>
            Wrap a delegate that may throw exceptions.
            </summary>
            <typeparam name="T">The delegate argument type.</typeparam>
            <param name="func">The code to execute.</param>
            <returns>A function that wraps any errors in an optional value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if an argument is null.</exception>
        </member>
        <member name="M:Sasa.Option.Return``1(System.Func{Sasa.Option{``0}})">
            <summary>
            Execute some code that may return null.
            </summary>
            <typeparam name="T">The possibly-null value.</typeparam>
            <param name="func">The code to execute.</param>
            <returns>An optional value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if an argument is null.</exception>
        </member>
        <member name="M:Sasa.Option.Select``2(Sasa.Option{``0},System.Func{``0,``1})">
            <summary>
            Transforms the embedded value to a new value if it exists, otherwise
            returns None.
            </summary>
            <typeparam name="T0">The type of the optional value.</typeparam>
            <typeparam name="TValue">The type of the returned optional value.</typeparam>
            <param name="option">The optional value.</param>
            <param name="some">The function to apply if <paramref name="option"/> has a value.</param>
            <returns>
            Returns <paramref name="some"/>(<paramref name="option"/>) if <code>o.HasValue</code>
            is true, or <code>new Option(default(R))</code> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if an argument is null.</exception>
        </member>
        <member name="M:Sasa.Option.Select``2(System.Nullable{``0},System.Func{``0,``1})">
            <summary>
            Transforms the embedded value to a new value if it exists, otherwise
            returns None.
            </summary>
            <typeparam name="T0">The type of the optional value.</typeparam>
            <typeparam name="TValue">The type of the returned optional value.</typeparam>
            <param name="option">The optional value.</param>
            <param name="some">The function to apply if <paramref name="option"/> has a value.</param>
            <returns>
            Returns <paramref name="some"/>(<paramref name="option"/>) if <code>o.HasValue</code>
            is true, or <code>new Option(default(R))</code> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if an argument is null.</exception>
        </member>
        <member name="M:Sasa.Option.Select``2(Sasa.Option{``0},System.Func{``0,``1},``1)">
            <summary>
            Performs a total match on the optional value and returns a new value.
            </summary>
            <typeparam name="T0">The type of the encapsulated value.</typeparam>
            <typeparam name="TValue">The type of the returned value.</typeparam>
            <param name="option">The optional value.</param>
            <param name="some">The function to call with the encapsulated value.</param>
            <param name="none">The return value if optional value is None.</param>
            <returns>A value computed from the given functions.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if an argument is null.</exception>
        </member>
        <member name="M:Sasa.Option.Select``2(Sasa.Option{``0},System.Func{``0,``1},System.Func{``1})">
            <summary>
            Performs a total match on the optional value and returns a new value.
            </summary>
            <typeparam name="T0">The type of the encapsulated value.</typeparam>
            <typeparam name="TValue">The type of the returned value.</typeparam>
            <param name="option">The optional value.</param>
            <param name="some">The function to call with the encapsulated value.</param>
            <param name="none">The function to call if no value available.</param>
            <returns>A value computed from the given functions.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if an argument is null.</exception>
        </member>
        <member name="M:Sasa.Option.Select``1(Sasa.Option{``0},``0)">
            <summary>
            Returns the encapsulated value if Some, returns 'none' otherwise.
            </summary>
            <typeparam name="T">The type of the optional value.</typeparam>
            <param name="option">The optional value.</param>
            <param name="none">The value to return if o.IsNone.</param>
            <returns>The value encapsulated in the option if <code>o.HasValue</code> is true,
            <paramref name="none"/> otherwise.</returns>
        </member>
        <member name="M:Sasa.Option.SelectMany``2(Sasa.Option{``0},System.Func{``0,Sasa.Option{``1}})">
            <summary>
            Project an optional value to another optional value.
            </summary>
            <typeparam name="T0">The type of the original value.</typeparam>
            <typeparam name="TValue">The type of the projected value.</typeparam>
            <param name="option">The original optional instance.</param>
            <param name="selector">The projection function.</param>
            <returns>A new optional value computed from the original.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if an argument is null.</exception>
        </member>
        <member name="M:Sasa.Option.SelectMany``2(Sasa.Option{``0},System.Func{``0,System.Nullable{``1}})">
            <summary>
            Project an optional value to another optional value.
            </summary>
            <typeparam name="T0">The type of the original value.</typeparam>
            <typeparam name="TValue">The type of the projected value.</typeparam>
            <param name="option">The original optional instance.</param>
            <param name="selector">The projection function.</param>
            <returns>A new optional value computed from the original.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if an argument is null.</exception>
        </member>
        <member name="M:Sasa.Option.SelectMany``2(System.Nullable{``0},System.Func{``0,Sasa.Option{``1}})">
            <summary>
            Project an optional value to another optional value.
            </summary>
            <typeparam name="T0">The type of the original value.</typeparam>
            <typeparam name="TValue">The type of the projected value.</typeparam>
            <param name="option">The original optional instance.</param>
            <param name="selector">The projection function.</param>
            <returns>A new optional value computed from the original.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if an argument is null.</exception>
        </member>
        <member name="M:Sasa.Option.SelectMany``2(System.Nullable{``0},System.Func{``0,System.Nullable{``1}})">
            <summary>
            Project an optional value to another optional value.
            </summary>
            <typeparam name="T0">The type of the original value.</typeparam>
            <typeparam name="TValue">The type of the projected value.</typeparam>
            <param name="option">The original optional instance.</param>
            <param name="selector">The projection function.</param>
            <returns>A new optional value computed from the original.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if an argument is null.</exception>
        </member>
        <member name="M:Sasa.Option.SelectMany``3(Sasa.Option{``0},System.Func{``0,Sasa.Option{``1}},System.Func{``0,``1,``2})">
            <summary>
            Projects two optional values to a third value.
            </summary>
            <typeparam name="T0">The type of the first value.</typeparam>
            <typeparam name="T1">The type of the second value.</typeparam>
            <typeparam name="TValue">The type of the projected value.</typeparam>
            <param name="option">The optional type.</param>
            <param name="selector">The intermediate projection function.</param>
            <param name="result">The final projection function.</param>
            <returns>The returned optional value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if an argument is null.</exception>
        </member>
        <member name="M:Sasa.Option.SelectMany``3(System.Nullable{``0},System.Func{``0,Sasa.Option{``1}},System.Func{``0,``1,``2})">
            <summary>
            Projects two optional values to a third value.
            </summary>
            <typeparam name="T0">The type of the first value.</typeparam>
            <typeparam name="T1">The type of the second value.</typeparam>
            <typeparam name="TValue">The type of the projected value.</typeparam>
            <param name="option">The optional type.</param>
            <param name="selector">The intermediate projection function.</param>
            <param name="result">The final projection function.</param>
            <returns>The returned optional value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if an argument is null.</exception>
        </member>
        <member name="M:Sasa.Option.SelectMany``3(Sasa.Option{``0},System.Func{``0,System.Nullable{``1}},System.Func{``0,``1,``2})">
            <summary>
            Projects two optional values to a third value.
            </summary>
            <typeparam name="T0">The type of the first value.</typeparam>
            <typeparam name="T1">The type of the second value.</typeparam>
            <typeparam name="TValue">The type of the projected value.</typeparam>
            <param name="option">The optional type.</param>
            <param name="selector">The intermediate projection function.</param>
            <param name="result">The final projection function.</param>
            <returns>The returned optional value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if an argument is null.</exception>
        </member>
        <member name="M:Sasa.Option.SelectMany``3(System.Nullable{``0},System.Func{``0,System.Nullable{``1}},System.Func{``0,``1,``2})">
            <summary>
            Projects two optional values to a third value.
            </summary>
            <typeparam name="T0">The type of the first value.</typeparam>
            <typeparam name="T1">The type of the second value.</typeparam>
            <typeparam name="TValue">The type of the projected value.</typeparam>
            <param name="option">The optional type.</param>
            <param name="selector">The intermediate projection function.</param>
            <param name="result">The final projection function.</param>
            <returns>The returned optional value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if an argument is null.</exception>
        </member>
        <member name="M:Sasa.Option.Do``1(Sasa.Option{``0},System.Action{``0})">
            <summary>
            Performs the given action on the embedded value if it exists.
            </summary>
            <typeparam name="T">The type of the optional value.</typeparam>
            <param name="option">The optional value.</param>
            <param name="func">The function to apply.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if an argument is null.</exception>
        </member>
        <member name="M:Sasa.Option.Where``1(System.Nullable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filter out an invalid value based on a predicate.
            </summary>
            <typeparam name="T">The source type.</typeparam>
            <param name="value">The nullable value.</param>
            <param name="predicate">The function to apply.</param>
            <returns>An optional value of type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if an argument is null.</exception>
        </member>
        <member name="M:Sasa.Option.Where``1(Sasa.Option{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filter out an invalid value based on a predicate.
            </summary>
            <typeparam name="T">The source type.</typeparam>
            <param name="value">The nullable value.</param>
            <param name="predicate">The function to apply.</param>
            <returns>An optional value of type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if an argument is null.</exception>
        </member>
        <member name="M:Sasa.Option.Any``1(System.Nullable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Check a predicate against a nullable value.
            </summary>
            <typeparam name="T">The source type.</typeparam>
            <param name="value">The nullable value.</param>
            <param name="predicate">The predicate to check.</param>
            <returns>True if <paramref name="value"/> has a value and the predicate returns true; false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if an argument is null.</exception>
        </member>
        <member name="M:Sasa.Option.Any``1(Sasa.Option{``0},System.Func{``0,System.Boolean})">
            <summary>
            Check a predicate against a nullable value.
            </summary>
            <typeparam name="T">The source type.</typeparam>
            <param name="value">The nullable value.</param>
            <param name="predicate">The predicate to check.</param>
            <returns>True if <paramref name="value"/> has a value and the predicate returns true; false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if an argument is null.</exception>
        </member>
        <member name="M:Sasa.Option.All``1(System.Nullable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Check a predicate against a nullable value.
            </summary>
            <typeparam name="T">The source type.</typeparam>
            <param name="value">The nullable value.</param>
            <param name="predicate">The predicate to check.</param>
            <returns>True if <paramref name="value"/> does not have a value or if the predicate returns true; false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if an argument is null.</exception>
        </member>
        <member name="M:Sasa.Option.All``1(Sasa.Option{``0},System.Func{``0,System.Boolean})">
            <summary>
            Check a predicate against a nullable value.
            </summary>
            <typeparam name="T">The source type.</typeparam>
            <param name="value">The nullable value.</param>
            <param name="predicate">The predicate to check.</param>
            <returns>True if <paramref name="value"/> does not have a value or if the predicate returns true; false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if an argument is null.</exception>
        </member>
        <member name="T:Sasa.Linq.ChangeType">
            <summary>
            Describes the type of change that was made.
            </summary>
        </member>
        <member name="F:Sasa.Linq.ChangeType.Add">
            <summary>
            An item was added at the given position.
            </summary>
        </member>
        <member name="F:Sasa.Linq.ChangeType.Remove">
            <summary>
            An item was removed at the given position.
            </summary>
        </member>
        <member name="T:Sasa.Linq.Change`1">
            <summary>
            Describes a change to a collection.
            </summary>
            <typeparam name="T">The collection item type.</typeparam>
        </member>
        <member name="M:Sasa.Linq.Change`1.ToString">
            <summary>
            Generate a string representation of this change.
            </summary>
            <returns>A string representation of this change.</returns>
        </member>
        <member name="M:Sasa.Linq.Change`1.Equals(Sasa.Linq.Change{`0})">
            <summary>
            Compares struct for equality.
            </summary>
            <param name="other">The object to compare to.</param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Linq.Change`1.Equals(System.Object)">
            <summary>
            Compares struct for equality.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Linq.Change`1.GetHashCode">
            <summary>
            Computes the hash code for the object.
            </summary>
            <returns>The integer hash code.</returns>
        </member>
        <member name="M:Sasa.Linq.Change`1.op_Equality(Sasa.Linq.Change{`0},Sasa.Linq.Change{`0})">
            <summary>
            Compares struct for equality.
            </summary>
            <param name="left">The left object to compare.</param>
            <param name="right">The right object to compare.</param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Linq.Change`1.op_Inequality(Sasa.Linq.Change{`0},Sasa.Linq.Change{`0})">
            <summary>
            Compares struct for inequality.
            </summary>
            <param name="left">The left object to compare.</param>
            <param name="right">The right object to compare.</param>
            <returns>True if not equal, false otherwise.</returns>
        </member>
        <member name="P:Sasa.Linq.Change`1.ChangeType">
            <summary>
            The change made at the given position.
            </summary>
        </member>
        <member name="P:Sasa.Linq.Change`1.Values">
            <summary>
            The set of values added or removed from the given position.
            </summary>
        </member>
        <member name="P:Sasa.Linq.Change`1.Position">
            <summary>
            The position in the sequence where the change took place.
            </summary>
        </member>
        <member name="T:Sasa.Enums">
            <summary>
            Extensions for System.Enum.
            </summary>
        </member>
        <member name="M:Sasa.Enums.ToEnum``1(System.String)">
            <summary>
            Parses an enumeration value from the string representation.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The string representation of the enum.</param>
            <returns>The enum corresponding to the string representation.</returns>
        </member>
        <member name="M:Sasa.Enums.ToEnum``1(System.String,System.Boolean)">
            <summary>
            Parses an enumeration value from the string representation.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The string representation of the enum.</param>
            <param name="ignoreCase">Indicates whether the parse is case-sensitive.</param>
            <returns>The enum corresponding to the string representation.</returns>
        </member>
        <member name="M:Sasa.Enums.IsDefined``1(``0)">
            <summary>
            Returns true if the value is valid for the given enum type.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The enum value to test.</param>
            <returns>Returns true if the value is valid for the enum.</returns>
        </member>
        <member name="M:Sasa.Enums.Values``1">
            <summary>
            Retrieves a sequence of the values of the constants in a specified enumeration.
            </summary>
            <typeparam name="TEnum">An enumeration type.</typeparam>
            <returns>A typed sequence of the enumeration constants.</returns>
        </member>
        <member name="M:Sasa.Enums.Names``1">
            <summary>
            Retrieves a sequence of the values of the constants in a specified enumeration.
            </summary>
            <typeparam name="TEnum">An enumeration type.</typeparam>
            <returns>A sequence of the string representations of the enumeration constants.</returns>
        </member>
        <member name="M:Sasa.Enums.TryParse``1(System.String,``0@)">
            <summary>
            Attempt to parse the given string as an enum.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The string representation of the num.</param>
            <param name="output">The enum corresponding to the string representation if
            successful, or the default value otherwise.</param>
            <returns>True if the parse succeeded, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Enums.TryParse``1(System.String,System.Boolean,``0@)">
            <summary>
            Attempt to parse the given string as an enum.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The string representation of the num.</param>
            <param name="ignoreCase">Indicates whether the parse is case-sensitive.</param>
            <param name="output">The enum corresponding to the string representation if
            successful, or the default value otherwise.</param>
            <returns>True if the parse succeeded, false otherwise.</returns>
        </member>
        <member name="T:Sasa.Enums.Cell`1">
            <summary>
            Caches the enum values array.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
        </member>
        <member name="T:Sasa.Collections.Dictionaries">
            <summary>
            Useful extensions to <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Sasa.Collections.Dictionaries.FindOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Returns the value named by 'key', or null if not present.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="key">The dictionary key.</param>
            <returns>The value bound by the key, or Option.None if key is unbound.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Collections.Dictionaries.FindOrOtherwise``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Returns the value named by 'key', or null if not present.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="key">The dictionary key.</param>
            <param name="value">The value to return if key does not exist.</param>
            <returns>The value bound by the key, or <paramref name="value"/> if key is unbound.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Collections.Dictionaries.InsertDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Adds the value to the dictionary if it does not already exist.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="key">The dictionary key.</param>
            <param name="value">The value to insert.</param>
            <returns>True if the item was inserted, false if the key already exists.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
        <member name="M:Sasa.Collections.Dictionaries.InsertDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            Adds the value to the dictionary if it does not already exist.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="key">The dictionary key.</param>
            <param name="value">The function to generate the value to insert.</param>
            <returns>True if the item was inserted, false if the key already exists.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if argument is null.</exception>
        </member>
    </members>
</doc>
